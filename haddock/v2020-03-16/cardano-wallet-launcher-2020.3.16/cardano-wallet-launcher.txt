-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities for a building commands launcher
--   
--   Utilities for a building commands launcher
@package cardano-wallet-launcher
@version 2020.3.16


-- | This module contains a mechanism for launching external processes,
--   ensuring that they are terminated on exceptions.
module Cardano.Launcher

-- | Represent a command to execute. Args are provided as a list where
--   options are expected to be prefixed with `--` or <a>-</a>. For
--   example:
--   
--   <pre>
--   Command "cardano-wallet"
--       [ "server"
--       , "--port", "8080"
--       , "--network", "mainnet"
--       ] (return ())
--       Inherit
--       Inherit
--   </pre>
data Command
Command :: String -> [String] -> IO () -> StdStream -> StdStream -> Command
[cmdName] :: Command -> String
[cmdArgs] :: Command -> [String]

-- | An extra action to run _before_ the command
[cmdSetup] :: Command -> IO ()

-- | Input to supply to command
[cmdInput] :: Command -> StdStream

-- | What to do with stdout &amp; stderr
[cmdOutput] :: Command -> StdStream
data StdStream

-- | Inherit Handle from parent
Inherit :: StdStream

-- | Use the supplied Handle
UseHandle :: Handle -> StdStream

-- | Create a new pipe. The returned <tt>Handle</tt> will use the default
--   encoding and newline translation mode (just like <tt>Handle</tt>s
--   created by <tt>openFile</tt>).
CreatePipe :: StdStream

-- | Close the stream's file descriptor without passing a Handle. On POSIX
--   systems this may lead to strange behavior in the child process because
--   attempting to read or write after the file has been closed throws an
--   error. This should only be used with child processes that don't use
--   the file descriptor at all. If you wish to ignore the child process's
--   output you should either create a pipe and drain it manually or pass a
--   <tt>Handle</tt> that writes to <tt>/dev/null</tt>.
NoStream :: StdStream

-- | ProcessHasExited is used by a monitoring thread to signal that the
--   process has exited.
data ProcessHasExited
ProcessDidNotStart :: String -> IOException -> ProcessHasExited
ProcessHasExited :: String -> ExitCode -> ProcessHasExited

-- | Starts a command in the background and then runs an action. If the
--   action finishes (through an exception or otherwise) then the process
--   is terminated (see <a>withCreateProcess</a>) for details. If the
--   process exits, the action is cancelled. The return type reflects those
--   two cases.
withBackendProcess :: Tracer IO LauncherLog -> Command -> IO a -> IO (Either ProcessHasExited a)

-- | A variant of <a>withBackendProcess</a> which also provides the
--   <a>ProcessHandle</a> and stdin <a>Handle</a> to the given action.
withBackendProcessHandle :: Tracer IO LauncherLog -> Command -> (Maybe Handle -> ProcessHandle -> IO a) -> IO (Either ProcessHasExited a)
data LauncherLog
MsgLauncherStart :: Command -> LauncherLog
WithProcessInfo :: String -> Text -> LaunchedProcessLog -> LauncherLog
MsgLauncherFinish :: ProcessHasExited -> LauncherLog
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Launcher.LauncherLog
instance GHC.Generics.Generic Cardano.Launcher.LauncherLog
instance GHC.Classes.Eq Cardano.Launcher.LauncherLog
instance GHC.Show.Show Cardano.Launcher.LauncherLog
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Launcher.LaunchedProcessLog
instance GHC.Generics.Generic Cardano.Launcher.LaunchedProcessLog
instance GHC.Classes.Eq Cardano.Launcher.LaunchedProcessLog
instance GHC.Show.Show Cardano.Launcher.LaunchedProcessLog
instance GHC.Classes.Eq Cardano.Launcher.ProcessHasExited
instance GHC.Show.Show Cardano.Launcher.ProcessHasExited
instance GHC.Generics.Generic Cardano.Launcher.Command
instance Cardano.BM.Data.Tracer.DefinePrivacyAnnotation Cardano.Launcher.LauncherLog
instance Cardano.BM.Data.Tracer.DefineSeverity Cardano.Launcher.LauncherLog
instance Data.Text.Class.ToText Cardano.Launcher.LauncherLog
instance Cardano.BM.Data.Tracer.DefinePrivacyAnnotation Cardano.Launcher.LaunchedProcessLog
instance Cardano.BM.Data.Tracer.DefineSeverity Cardano.Launcher.LaunchedProcessLog
instance GHC.Exception.Type.Exception Cardano.Launcher.ProcessHasExited
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Launcher.ProcessHasExited
instance GHC.Show.Show Cardano.Launcher.Command
instance GHC.Classes.Eq Cardano.Launcher.Command
instance Formatting.Buildable.Buildable Cardano.Launcher.Command
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Launcher.Command


-- | This module contains functions relating to startup and shutdown of the
--   <tt>cardano-wallet serve</tt> program.
module Cardano.Startup

-- | Force the locale text encoding to UTF-8. This is needed because the
--   CLI prints UTF-8 characters regardless of the <tt>LANG</tt>
--   environment variable or any other settings.
--   
--   On Windows the current console code page is changed to UTF-8.
withUtf8Encoding :: IO a -> IO a

-- | Runs the given action with a cross-platform clean shutdown handler.
--   
--   This is necessary when running cardano-wallet as a subprocess of
--   Daedalus. For more details, see
--   <a>https://github.com/input-output-hk/cardano-launcher/blob/master/docs/windows-clean-shutdown.md</a>
--   
--   It works simply by reading from <a>stdin</a>, which is otherwise
--   unused by the API server. Once end-of-file is reached, it cancels the
--   action, causing the program to shut down.
--   
--   So, when running <tt>cardano-wallet</tt> as a subprocess, the parent
--   process should pass a pipe for <a>stdin</a>, then close the pipe when
--   it wants <tt>cardano-wallet</tt> to shut down.
--   
--   TODO: may need to add <tt>forkIO</tt> if <tt>hGet</tt> blocks on
--   windows
withShutdownHandler :: Tracer IO ShutdownHandlerLog -> IO a -> IO (Maybe a)

-- | A variant of <a>withShutdownHandler</a> where the handle to read can
--   be chosen.
withShutdownHandler' :: Tracer IO ShutdownHandlerLog -> Handle -> IO a -> IO (Maybe a)

-- | Convert any SIGTERM received to SIGINT, for which the runtime system
--   has handlers that will correctly clean up sub-processes.
installSignalHandlers :: IO () -> IO ()
data ShutdownHandlerLog
MsgShutdownHandler :: Bool -> ShutdownHandlerLog
MsgShutdownEOF :: ShutdownHandlerLog
MsgShutdownError :: IOException -> ShutdownHandlerLog
instance GHC.Classes.Eq Cardano.Startup.ShutdownHandlerLog
instance GHC.Show.Show Cardano.Startup.ShutdownHandlerLog
instance Data.Text.Class.ToText Cardano.Startup.ShutdownHandlerLog
instance Cardano.BM.Data.Tracer.DefinePrivacyAnnotation Cardano.Startup.ShutdownHandlerLog
instance Cardano.BM.Data.Tracer.DefineSeverity Cardano.Startup.ShutdownHandlerLog
