-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using Jörmungandr
--   
--   Please see README.md
@package cardano-wallet-jormungandr
@version 2020.4.28


-- | Contains various implementation decision that are specific to a
--   particular network / protocol. This allows us to easily select a
--   particular backend (Byron, Shelley-Rust, Shelley-Haskell) and isolate
--   the bits that vary between those backends.
module Cardano.Wallet.Jormungandr.Compatibility

-- | A type representing the Jormungandr as a backend target. This has an
--   influence on binary serializer &amp; network primitives. See also
--   <tt>DefineTx</tt>
data Jormungandr

-- | Jörmugandr's chain parameter doesn't include a transaction max size.
--   The actual hard-limit for the size is constrained by the binary format
--   and numbers used to represent the number of inputs and outputs
--   (Word8), yet there's also a soft-limit of 8kb which results in much
--   smaller transactions in the end.
softTxMaxSize :: Quantity "byte" Word16
data BaseUrl
BaseUrl :: Scheme -> String -> Int -> String -> BaseUrl
[baseUrlScheme] :: BaseUrl -> Scheme
[baseUrlHost] :: BaseUrl -> String
[baseUrlPort] :: BaseUrl -> Int
[baseUrlPath] :: BaseUrl -> String
data Scheme
Http :: Scheme
Https :: Scheme
localhostBaseUrl :: Int -> BaseUrl

-- | Format an API <a>BaseUrl</a>, for logging, etc.
baseUrlToText :: BaseUrl -> Text

module Cardano.Wallet.Jormungandr.Rewards
data RewardFormula
HalvingFormula :: RewardParams -> RewardFormula
LinearFormula :: RewardParams -> RewardFormula
data RewardParams
RewardParams :: Word64 -> Ratio Word64 -> Word32 -> Word32 -> RewardParams

-- | In the linear formula, it represents the starting point of the
--   contribution at #epoch=0, whereas in halving formula is used as
--   starting constant for the calculation.
[rFixed] :: RewardParams -> Word64

-- | In the halving formula, an effective value between 0.0 to 1.0
--   indicates a reducing contribution, whereas above 1.0 it indicate an
--   acceleration of contribution.
--   
--   However in linear formula the meaning is just a scaling factor for the
--   epoch zone (current_epoch - start_epoch / epoch_rate). Further
--   requirement is that this ratio is expressed in fractional form (e.g.
--   1/2), which allow calculation in integer form.
[rRatio] :: RewardParams -> Ratio Word64

-- | indicates when this contribution start. note that if the epoch is not
--   the same or after the epoch_start, the overall contribution is zero.
[rEpochStart] :: RewardParams -> Word32

-- | the rate at which the contribution is tweaked related to epoch.
[rEpochRate] :: RewardParams -> Word32
data TaxParameters
TaxParameters :: Word64 -> Ratio Word64 -> Maybe Word64 -> TaxParameters

-- | A fix value taken from the total
[taxFixed] :: TaxParameters -> Word64

-- | An extra percentage taken from the total
[taxRatio] :: TaxParameters -> Ratio Word64

-- | It is possible to add a max bound to the total value taken at each
--   cut.
[taxLimit] :: TaxParameters -> Maybe Word64

-- | limit the epoch total reward drawing limit to a portion of the total
--   active stake of the system.
--   
--   for example, if set to 10%, the reward drawn will be bounded by the
--   10% of the total active stake.
--   
--   this value is optional, the default is no reward drawing limit
data RewardLimit
RewardLimitNone :: RewardLimit
RewardLimitByAbsoluteStake :: Ratio Word64 -> RewardLimit

-- | settings to incentivize the numbers of stake pool to be registered on
--   the blockchain.
--   
--   These settings does not prevent more stake pool to be added. For
--   example if there is already 1000 stake pools, someone can still
--   register a new stake pool and affect the rewards of everyone else too.
--   
--   if the threshold is reached, the pool doesn't really have incentive to
--   create more blocks than 1 / set-value-of-pools % of stake.
--   
--   this value is optional, the default is no pool participation capping
data PoolCapping
PoolCapping :: Word32 -> Word32 -> PoolCapping
[minParticipation] :: PoolCapping -> Word32
[maxParticipation] :: PoolCapping -> Word32
rewardsAt :: (RewardLimit, Quantity "lovelace" Word64) -> TaxParameters -> EpochNo -> RewardFormula -> Quantity "lovelace" Word64
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Rewards.PoolCapping
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Rewards.PoolCapping
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Rewards.PoolCapping
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Rewards.RewardLimit
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Rewards.RewardLimit
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Rewards.RewardLimit
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Rewards.TaxParameters
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Rewards.TaxParameters
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Rewards.TaxParameters
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Rewards.RewardFormula
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Rewards.RewardFormula
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Rewards.RewardFormula
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Rewards.RewardParams
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Rewards.RewardParams
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Rewards.RewardParams
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Rewards.PoolCapping
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Rewards.RewardLimit
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Rewards.TaxParameters
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Rewards.RewardFormula
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Rewards.RewardParams


-- | The format is for the Shelley era as implemented by the Jörmungandr
--   node. It is described <a>here</a>
--   
--   The module to some extent defines its own Jörmungandr-specific types,
--   different from <a>Cardano.Wallet.Primitive.Types</a>. Here,
--   transactions are just one of many possible <a>Fragment</a> that can be
--   included in a block.
--   
--   In some cases it also leads us to <i>throw exceptions</i> when
--   integers would otherwise overflow (look for uses of <a>toEnum</a>).
module Cardano.Wallet.Jormungandr.Binary
data Block
Block :: BlockHeader -> [Fragment] -> Block
[header] :: Block -> BlockHeader
[fragments] :: Block -> [Fragment]
data BlockHeader
BlockHeader :: Word16 -> Word32 -> SlotId -> Word32 -> Hash "content" -> Hash "BlockHeader" -> Hash "BlockHeader" -> Maybe PoolId -> BlockHeader
[version] :: BlockHeader -> Word16
[contentSize] :: BlockHeader -> Word32
[slot] :: BlockHeader -> SlotId
[chainLength] :: BlockHeader -> Word32
[contentHash] :: BlockHeader -> Hash "content"
[headerHash] :: BlockHeader -> Hash "BlockHeader"
[parentHeaderHash] :: BlockHeader -> Hash "BlockHeader"

-- | Will contain the VRFPubKey of the stake pool for non-genesis
--   Genesis/Praos blocks.
[producedBy] :: BlockHeader -> Maybe PoolId
data ConfigParam

-- | The official start time of the blockchain, in seconds since the Unix
--   epoch.
Block0Date :: StartTime -> ConfigParam

-- | Address discrimination. Testnet / Mainnet.
ConfigDiscrimination :: Discrimination -> ConfigParam

-- | Consensus version. BFT / Genesis Praos.
Consensus :: ConsensusVersion -> ConfigParam

-- | Number of slots in an epoch.
SlotsPerEpoch :: EpochLength -> ConfigParam

-- | Slot duration in seconds.
SlotDuration :: NominalDiffTime -> ConfigParam

-- | The length of the suffix of the chain (in blocks) considered unstable.
EpochStabilityDepth :: Quantity "block" Word32 -> ConfigParam

-- | Determines maximum probability of a stakeholder being elected as
--   leader in a slot.
ConsensusGenesisPraosParamF :: Milli -> ConfigParam

-- | Maximum number of transactions in a block.
MaxNumberOfTransactionsPerBlock :: Word32 -> ConfigParam

-- | Fraction of blocks to be created by BFT leaders.
BftSlotsRatio :: Milli -> ConfigParam

-- | Add a BFT Leader
AddBftLeader :: LeaderId -> ConfigParam

-- | Remove a BFT Leader
RemoveBftLeader :: LeaderId -> ConfigParam

-- | Enable/disable account creation.
AllowAccountCreation :: Bool -> ConfigParam

-- | Coefficients for fee calculations.
ConfigLinearFee :: FeePolicy -> ConfigParam

-- | Number of epochs until an update proposal expires.
ProposalExpiration :: Quantity "epoch" Word32 -> ConfigParam

-- | Maximum number of seconds per update for KES keys known by the system
--   after start time.
KesUpdateSpeed :: Quantity "second/update" Word32 -> ConfigParam

-- | Per certificate fees, override the <tt>certificate</tt> fee of the
--   linear fee
ConfigPerCertificate :: PerCertificateFee -> ConfigParam

-- | Reward Parameters.
ConfigRewardFormula :: RewardFormula -> ConfigParam

-- | Treasury tax parameters.
TreasuryTax :: TaxParameters -> ConfigParam

-- | limit the epoch total reward drawing limit to a portion of the total
--   active stake of the system.
ConfigRewardLimit :: RewardLimit -> ConfigParam

-- | settings to incentivize the numbers of stake pool to be registered on
--   the blockchain.
ConfigPoolCapping :: PoolCapping -> ConfigParam
UnimplementedConfigParam :: Word16 -> ConfigParam
data ConsensusVersion
BFT :: ConsensusVersion
GenesisPraos :: ConsensusVersion
newtype LeaderId
LeaderId :: ByteString -> LeaderId

-- | The block-body consists of fragments. There are several types of
--   fragments.
data Fragment

-- | Found in the genesis block.
Initial :: [ConfigParam] -> Fragment

-- | A standard signed transaction
Transaction :: Tx -> Fragment

-- | A signed transaction with stake pool delegation
StakeDelegation :: (StakeDelegationType, ChimericAccount, Tx) -> Fragment

-- | A signed transaction with a stake pool registration.
PoolRegistration :: (PoolId, [PoolOwner], TaxParameters, Tx) -> Fragment
UnimplementedFragment :: Word8 -> Fragment
data FragmentSpec
FragmentInitial :: FragmentSpec
FragmentLegacyUTxO :: FragmentSpec
FragmentTransaction :: FragmentSpec
FragmentDelegation :: FragmentSpec

-- | Used to represent (&gt;= 0) rational numbers as (&gt;= 0) integers, by
--   just multiplying by 1000. For instance: '3.141592' is represented as
--   'Milli 3142'.
newtype Milli
Milli :: Word64 -> Milli
data PerCertificateFee
PerCertificateFee :: Word64 -> Word64 -> Word64 -> PerCertificateFee
[feePoolRegistration] :: PerCertificateFee -> Word64
[feeStakeDelegation] :: PerCertificateFee -> Word64
[feeOwnerStakeDelegation] :: PerCertificateFee -> Word64
data TaxParameters
TaxParameters :: Word64 -> Ratio Word64 -> Maybe Word64 -> TaxParameters

-- | A fix value taken from the total
[taxFixed] :: TaxParameters -> Word64

-- | An extra percentage taken from the total
[taxRatio] :: TaxParameters -> Ratio Word64

-- | It is possible to add a max bound to the total value taken at each
--   cut.
[taxLimit] :: TaxParameters -> Maybe Word64
getBlock :: Get Block
getBlockHeader :: Get BlockHeader

-- | Extract a <a>Block</a> id from a serialized <a>Block</a>.
getBlockId :: Get (Hash "BlockHeader")

-- | Decode a fragment (header + contents).
--   
--   Corresponds to FRAGMENT in the specification.
getFragment :: Get Fragment

-- | Decode the contents of a <tt>Transaction</tt>-fragment.
getTransaction :: Hash "Tx" -> Get Tx

-- | Take an existing fee policy and override the <tt>certificate</tt>
--   using the a given per certificate policy.
--   
--   This relies on the assumption that the certificate in the
--   <a>FeePolicy</a> is only interpret as a 'stake delegation'
--   certificate.
overrideFeePolicy :: FeePolicy -> PerCertificateFee -> FeePolicy
data MkFragment
MkFragmentSimpleTransaction :: TxWitnessTag -> MkFragment
MkFragmentStakeDelegation :: TxWitnessTag -> StakeDelegationType -> ChimericAccount -> (XPrv, Passphrase "encryption") -> MkFragment
data StakeDelegationType
DlgNone :: StakeDelegationType
DlgFull :: PoolId -> StakeDelegationType
DlgRatio :: StakeDelegationType
putFragment :: Hash "Genesis" -> [((TxIn, Coin), (XPrv, Passphrase "encryption"))] -> [TxOut] -> MkFragment -> PutM (Proxy "Fragment")
finalizeFragment :: PutM (Proxy "Fragment") -> SealedTx
fragmentId :: PutM (Proxy "Fragment") -> Hash "Tx"
data TxWitnessTag
TxWitnessLegacyUTxO :: TxWitnessTag
TxWitnessUTxO :: TxWitnessTag
TxWitnessAccount :: TxWitnessTag
TxWitnessMultisig :: TxWitnessTag
putTxWitnessTag :: TxWitnessTag -> Put
getTxWitnessTag :: Get TxWitnessTag
txWitnessSize :: TxWitnessTag -> Int

-- | Convert the Jörmungandr binary format block into a simpler Wallet
--   block.
convertBlock :: Block -> Block

-- | Convert the Jörmungandr binary format header into a simpler Wallet
--   header.
convertBlockHeader :: BlockHeader -> BlockHeader

-- | Extracts ownership information from all stake pool registration
--   certificates in the Jörmungandr block.
poolRegistrationsFromBlock :: Block -> [PoolRegistrationCertificate]

-- | If all incentives parameters are present in the blocks, returns a
--   function that computes reward based on a given epoch. Returns
--   <a>Nothing</a> otherwise.
rankingEpochConstants :: Block -> Maybe (EpochNo -> Quantity "lovelace" Word64 -> EpochConstants)
putAddress :: Address -> Put
getAddress :: Get Address
whileM :: Monad m => m Bool -> m a -> m [a]

-- | Compute a Blake2b_256 hash of a given <a>ByteString</a>
blake2b256 :: ByteString -> ByteString
maxNumberOfInputs :: Int
maxNumberOfOutputs :: Int
data Get a
runGet :: () => Get a -> ByteString -> a

-- | A safe version of <tt>runGet</tt> which doesn't throw on error.
eitherRunGet :: () => Get a -> ByteString -> Either String a
runGetOrFail :: () => Get a -> ByteString -> Either (ByteString, ByteOffset, String) (ByteString, ByteOffset, a)
type Put = PutM ()
runPut :: Put -> ByteString
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.Block
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Block
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Block
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Fragment
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Fragment
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.Fragment
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.PerCertificateFee
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.PerCertificateFee
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.PerCertificateFee
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.LeaderId
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.LeaderId
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.LeaderId
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Milli
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Milli
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.Milli
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.Discrimination
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.Discrimination
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.Discrimination
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.StakeDelegationType
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.StakeDelegationType
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.StakeDelegationType
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.TxWitnessTag
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.TxWitnessTag
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Binary.BlockHeader
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Binary.BlockHeader
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Binary.BlockHeader
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.Block
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.Fragment
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.ConfigParam
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.PerCertificateFee
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.ConsensusVersion
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.LeaderId
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.Milli
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.Discrimination
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.StakeDelegationType
instance Control.DeepSeq.NFData Cardano.Wallet.Jormungandr.Binary.BlockHeader


-- | Definitions of types used in the Jörmungandr REST API.
module Cardano.Wallet.Jormungandr.Api.Types

-- | Polymorphic wrapper type to put around primitive types and, 3rd party
--   lib types to avoid defining orphan instances and/or, undesirable
--   instances on primitive types. It helps to keep a nice separation of
--   concerns between the API layer and other modules.
newtype ApiT a
ApiT :: a -> ApiT a
[$sel:getApiT:ApiT] :: ApiT a -> a
newtype AccountId
AccountId :: Hash "Account" -> AccountId
[$sel:getAccountId:AccountId] :: AccountId -> Hash "Account"
data AccountState
AccountState :: !Quantity "lovelace" Word64 -> [(PoolId, Quantity "stake-pool-ratio" Word64)] -> !Quantity "transaction-count" Word64 -> AccountState
[$sel:currentBalance:AccountState] :: AccountState -> !Quantity "lovelace" Word64
[$sel:stakePools:AccountState] :: AccountState -> [(PoolId, Quantity "stake-pool-ratio" Word64)]
[$sel:totalTransactionCount:AccountState] :: AccountState -> !Quantity "transaction-count" Word64
data ApiStakeDistribution
ApiStakeDistribution :: ApiT (Quantity "lovelace" Word64) -> [(ApiT PoolId, ApiT (Quantity "lovelace" Word64))] -> ApiT (Quantity "lovelace" Word64) -> ApiStakeDistribution
[$sel:dangling:ApiStakeDistribution] :: ApiStakeDistribution -> ApiT (Quantity "lovelace" Word64)
[$sel:pools:ApiStakeDistribution] :: ApiStakeDistribution -> [(ApiT PoolId, ApiT (Quantity "lovelace" Word64))]
[$sel:unassigned:ApiStakeDistribution] :: ApiStakeDistribution -> ApiT (Quantity "lovelace" Word64)
newtype BlockId
BlockId :: Hash "BlockHeader" -> BlockId
[$sel:getBlockId:BlockId] :: BlockId -> Hash "BlockHeader"
data StakeApiResponse
StakeApiResponse :: ApiT EpochNo -> ApiStakeDistribution -> StakeApiResponse
[$sel:epoch:StakeApiResponse] :: StakeApiResponse -> ApiT EpochNo
[$sel:stake:StakeApiResponse] :: StakeApiResponse -> ApiStakeDistribution
data Hex

-- | Represents the binary format of Jörmungandr.
data JormungandrBinary
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.Types.ApiAccountState
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Types.ApiAccountState
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Types.ApiAccountState
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.Types.ApiDelegationState
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Types.ApiDelegationState
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Types.ApiDelegationState
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.Types.StakeApiResponse
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Types.StakeApiResponse
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Types.StakeApiResponse
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.Types.ApiStakeDistribution
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Types.ApiStakeDistribution
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Types.ApiStakeDistribution
instance GHC.Classes.Eq a => GHC.Classes.Eq (Cardano.Wallet.Jormungandr.Api.Types.ApiT a)
instance GHC.Show.Show a => GHC.Show.Show (Cardano.Wallet.Jormungandr.Api.Types.ApiT a)
instance GHC.Generics.Generic (Cardano.Wallet.Jormungandr.Api.Types.ApiT a)
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Types.AccountState
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Types.AccountState
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Types.AccountId
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Types.AccountId
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Jormungandr.Api.Types.ApiAccountState
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Jormungandr.Api.Types.ApiAccountState
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Jormungandr.Api.Types.ApiDelegationState
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Jormungandr.Api.Types.ApiDelegationState
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.Types.Hex Cardano.Wallet.Jormungandr.Api.Types.BlockId
instance Servant.API.ContentTypes.Accept Cardano.Wallet.Jormungandr.Api.Types.Hex
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.Types.JormungandrBinary [Cardano.Wallet.Jormungandr.Api.Types.BlockId]
instance Servant.API.ContentTypes.Accept Cardano.Wallet.Jormungandr.Api.Types.JormungandrBinary
instance Servant.API.ContentTypes.MimeUnrender Cardano.Wallet.Jormungandr.Api.Types.JormungandrBinary Cardano.Wallet.Jormungandr.Binary.Block
instance Servant.API.ContentTypes.MimeRender Cardano.Wallet.Jormungandr.Api.Types.JormungandrBinary Cardano.Wallet.Primitive.Types.SealedTx
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Jormungandr.Api.Types.StakeApiResponse
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Jormungandr.Api.Types.ApiStakeDistribution
instance Web.Internal.HttpApiData.ToHttpApiData (Cardano.Wallet.Jormungandr.Api.Types.ApiT Cardano.Wallet.Primitive.Types.EpochNo)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Jormungandr.Api.Types.ApiT (Data.Quantity.Quantity "lovelace" GHC.Word.Word64))
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Jormungandr.Api.Types.ApiT (Data.Quantity.Quantity "lovelace" GHC.Word.Word64))
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Jormungandr.Api.Types.ApiT (Data.Quantity.Quantity "stake-pool-ratio" GHC.Word.Word64))
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Jormungandr.Api.Types.ApiT (Data.Quantity.Quantity "stake-pool-ratio" GHC.Word.Word64))
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Jormungandr.Api.Types.ApiT (Data.Quantity.Quantity "transaction-count" GHC.Word.Word64))
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Jormungandr.Api.Types.ApiT (Data.Quantity.Quantity "transaction-count" GHC.Word.Word64))
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Jormungandr.Api.Types.ApiT Cardano.Wallet.Primitive.Types.EpochNo)
instance Data.Aeson.Types.FromJSON.FromJSON (Cardano.Wallet.Jormungandr.Api.Types.ApiT Cardano.Wallet.Primitive.Types.PoolId)
instance Data.Aeson.Types.ToJSON.ToJSON (Cardano.Wallet.Jormungandr.Api.Types.ApiT Cardano.Wallet.Primitive.Types.PoolId)
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.Jormungandr.Api.Types.BlockId
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Wallet.Jormungandr.Api.Types.AccountState
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Wallet.Jormungandr.Api.Types.AccountState
instance Web.Internal.HttpApiData.ToHttpApiData Cardano.Wallet.Jormungandr.Api.Types.AccountId


-- | A specification for the Jörmungandr REST API.
module Cardano.Wallet.Jormungandr.Api
type Api = GetAccountState :<|> GetTipId :<|> GetBlock :<|> GetBlockDescendantIds :<|> PostMessage :<|> GetStakeDistribution
type GetAccountState = "api" :> "v0" :> "account" :> Capture "accountId" AccountId :> Get '[JSON] AccountState

-- | Retrieve a block by its id.
type GetBlock = "api" :> "v0" :> "block" :> Capture "blockHeaderHash" BlockId :> Get '[JormungandrBinary] Block

-- | Retrieve the header of the latest known block.
type GetTipId = "api" :> "v0" :> "tip" :> Get '[Hex] BlockId

-- | Retrieve <tt>n</tt> descendants of a given block, sorted from closest
--   to farthest.
--   
--   There might also exist fewer than <tt>n</tt> descendants.
--   
--   For n=3 we might have:
--   
--   <pre>
--   [genesis] ... -- [b] -- [b+1] -- [b+2] -- [b+3] -- ... -- [tip]
--                     \       \                  \
--                    parent    +--- descendants ---+
--   </pre>
type GetBlockDescendantIds = "api" :> "v0" :> "block" :> Capture "blockId" BlockId :> "next_id" :> QueryParam "count" Word :> Get '[JormungandrBinary] [BlockId]

-- | Retrieve stake distribution
type GetStakeDistribution = "api" :> "v0" :> "stake" :> Capture "epoch" (ApiT EpochNo) :> Get '[JSON] StakeApiResponse
type PostMessage = "api" :> "v0" :> "message" :> ReqBody '[JormungandrBinary] SealedTx :> Post '[NoContent] NoContent
api :: Proxy Api


-- | This module implements parts of a Jörmungandr REST API Client. It also
--   provides some top-level helpers that are built using the API and are
--   quite handy in other situations.
module Cardano.Wallet.Jormungandr.Api.Client

-- | Endpoints of the jormungandr REST API.
data JormungandrClient m
JormungandrClient :: (Hash "Account" -> ExceptT ErrGetAccountState m AccountState) -> ExceptT ErrNetworkUnavailable m (Hash "BlockHeader") -> (Hash "BlockHeader" -> ExceptT ErrGetBlock m Block) -> (Hash "BlockHeader" -> Word -> ExceptT ErrGetDescendants m [Hash "BlockHeader"]) -> (SealedTx -> ExceptT ErrPostTx m ()) -> (Hash "Genesis" -> ExceptT ErrGetBlockchainParams m (Block, BlockchainParameters)) -> (EpochNo -> ExceptT ErrNetworkUnavailable m StakeApiResponse) -> JormungandrClient m
[$sel:getAccountState:JormungandrClient] :: JormungandrClient m -> Hash "Account" -> ExceptT ErrGetAccountState m AccountState
[$sel:getTipId:JormungandrClient] :: JormungandrClient m -> ExceptT ErrNetworkUnavailable m (Hash "BlockHeader")
[$sel:getBlock:JormungandrClient] :: JormungandrClient m -> Hash "BlockHeader" -> ExceptT ErrGetBlock m Block
[$sel:getDescendantIds:JormungandrClient] :: JormungandrClient m -> Hash "BlockHeader" -> Word -> ExceptT ErrGetDescendants m [Hash "BlockHeader"]
[$sel:postMessage:JormungandrClient] :: JormungandrClient m -> SealedTx -> ExceptT ErrPostTx m ()
[$sel:getInitialBlockchainParameters:JormungandrClient] :: JormungandrClient m -> Hash "Genesis" -> ExceptT ErrGetBlockchainParams m (Block, BlockchainParameters)
[$sel:getStakeDistribution:JormungandrClient] :: JormungandrClient m -> EpochNo -> ExceptT ErrNetworkUnavailable m StakeApiResponse

-- | Construct a <a>JormungandrClient</a>
mkJormungandrClient :: Manager -> BaseUrl -> JormungandrClient IO

-- | Get a block header corresponding to a header hash.
getBlockHeader :: Monad m => JormungandrClient m -> Hash "BlockHeader" -> ExceptT ErrGetBlock m BlockHeader
getBlocks :: Monad m => JormungandrClient m -> Word -> Hash "BlockHeader" -> ExceptT ErrGetBlock m [Block]

-- | Safely lift error into a bigger type.
class LiftError lift
liftE :: LiftError lift => lift
data ErrGetAccountState
ErrGetAccountStateNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetAccountState
ErrGetAccountStateAccountNotFound :: Hash "Account" -> ErrGetAccountState

-- | Error while trying to get one or more blocks
data ErrGetBlock
ErrGetBlockNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetBlock
ErrGetBlockNotFound :: Hash "BlockHeader" -> ErrGetBlock
data ErrGetBlockchainParams
ErrGetBlockchainParamsNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetBlockchainParams
ErrGetBlockchainParamsGenesisNotFound :: Hash "Genesis" -> ErrGetBlockchainParams
ErrGetBlockchainParamsIncompleteParams :: [ConfigParam] -> ErrGetBlockchainParams
data ErrGetDescendants
ErrGetDescendantsNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetDescendants
ErrGetDescendantsParentNotFound :: Hash "BlockHeader" -> ErrGetDescendants

-- | Error while trying to get the node tip
data ErrCurrentNodeTip
ErrCurrentNodeTipNetworkUnreachable :: ErrNetworkUnavailable -> ErrCurrentNodeTip
ErrCurrentNodeTipNotFound :: ErrCurrentNodeTip

-- | Network is unavailable
data ErrNetworkUnavailable

-- | Cannot connect to network backend.
ErrNetworkUnreachable :: Text -> ErrNetworkUnavailable

-- | Network backend reports that the requested network is invalid.
ErrNetworkInvalid :: Text -> ErrNetworkUnavailable

-- | Error while trying to send a transaction
data ErrPostTx
ErrPostTxNetworkUnreachable :: ErrNetworkUnavailable -> ErrPostTx
ErrPostTxBadRequest :: Text -> ErrPostTx
ErrPostTxProtocolFailure :: Text -> ErrPostTx
data ErrUnexpectedNetworkFailure
ErrUnexpectedNetworkFailure :: Link -> ClientError -> ErrUnexpectedNetworkFailure
data BaseUrl
BaseUrl :: Scheme -> String -> Int -> String -> BaseUrl
[baseUrlScheme] :: BaseUrl -> Scheme
[baseUrlHost] :: BaseUrl -> String
[baseUrlPort] :: BaseUrl -> Int
[baseUrlPath] :: BaseUrl -> String
data Scheme
Http :: Scheme
Https :: Scheme
defaultManagerSettings :: ManagerSettings
newManager :: ManagerSettings -> IO Manager
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Client.ErrGetBlockchainParams
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Client.ErrGetBlockchainParams
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.Client.ErrGetBlockchainParams
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Client.ErrGetDescendants
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Client.ErrGetDescendants
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.Client.ErrGetDescendants
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Client.ErrGetAccountState
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Api.Client.ErrGetAccountState
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.Client.ErrGetAccountState
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Api.Client.ErrUnexpectedNetworkFailure
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Api.Client.ErrUnexpectedNetworkFailure
instance Cardano.Wallet.Jormungandr.Api.Client.LiftError (Cardano.Wallet.Network.ErrGetBlock -> Cardano.Wallet.Network.ErrCurrentNodeTip)
instance Cardano.Wallet.Jormungandr.Api.Client.LiftError (Cardano.Wallet.Network.ErrNetworkUnavailable -> Cardano.Wallet.Network.ErrGetBlock)
instance Cardano.Wallet.Jormungandr.Api.Client.LiftError (Cardano.Wallet.Jormungandr.Api.Client.ErrGetDescendants -> Cardano.Wallet.Network.ErrGetBlock)
instance GHC.Exception.Type.Exception Cardano.Wallet.Jormungandr.Api.Client.ErrUnexpectedNetworkFailure


-- | This module allows the wallet to retrieve blocks from a known
--   <tt>Jormungandr</tt> node. This is done by providing a
--   <tt>NetworkLayer</tt> with some logic building on top of an underlying
--   <tt>JormungandrClient</tt> HTTP client.
--   
--   It also provides facilities for starting the <tt>jormungandr</tt> node
--   backend process. The Jormungandr <a>NetworkLayer</a> implementation
--   uses the HTTP REST API of this backend.
module Cardano.Wallet.Jormungandr.Network

-- | Whether to start Jormungandr with the given config, or to connect to
--   an already running Jormungandr REST API using the given parameters.
data JormungandrBackend
UseRunning :: JormungandrConnParams -> JormungandrBackend
Launch :: JormungandrConfig -> JormungandrBackend

-- | Parameters for connecting to a Jormungandr REST API.
data JormungandrConnParams
JormungandrConnParams :: Hash "Genesis" -> BaseUrl -> JormungandrConnParams
[$sel:_genesisHash:JormungandrConnParams] :: JormungandrConnParams -> Hash "Genesis"
[$sel:_restApi:JormungandrConnParams] :: JormungandrConnParams -> BaseUrl

-- | Starts the network layer and runs the given action with a
--   <a>NetworkLayer</a>. The caller is responsible for handling errors
--   which may have occurred while starting the Node.
withNetworkLayer :: forall a t. t ~ Jormungandr => Tracer IO NetworkLayerLog -> JormungandrBackend -> (Either ErrStartup (JormungandrConnParams, (Block, BlockchainParameters), NetworkLayer IO t Block) -> IO a) -> IO a

-- | Creates a new <a>NetworkLayer</a> connecting to an underlying
--   <a>Jormungandr</a> backend target.
newNetworkLayer :: forall t. t ~ Jormungandr => Tracer IO NetworkLayerLog -> BaseUrl -> Hash "Genesis" -> ExceptT ErrGetBlockchainParams IO ((Block, BlockchainParameters), NetworkLayer IO t Block)

-- | A subset of the Jormungandr configuration parameters, used for
--   starting the Jormungandr node backend.
data JormungandrConfig
JormungandrConfig :: FilePath -> Either (Hash "Genesis") FilePath -> Maybe PortNumber -> StdStream -> [String] -> JormungandrConfig
[$sel:_stateDir:JormungandrConfig] :: JormungandrConfig -> FilePath
[$sel:_genesisBlock:JormungandrConfig] :: JormungandrConfig -> Either (Hash "Genesis") FilePath
[$sel:_restApiPort:JormungandrConfig] :: JormungandrConfig -> Maybe PortNumber
[$sel:_outputStream:JormungandrConfig] :: JormungandrConfig -> StdStream
[$sel:_extraArgs:JormungandrConfig] :: JormungandrConfig -> [String]

-- | Launches a Jörmungandr node backend with the given configuration
withJormungandr :: Tracer IO NetworkLayerLog -> JormungandrConfig -> (JormungandrConnParams -> IO a) -> IO (Either ErrStartup a)

-- | Extract the port number from the base URL part of the connection
--   params.
connParamsPort :: JormungandrConnParams -> Int

-- | Error while trying to get one or more blocks
data ErrGetBlock
ErrGetBlockNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetBlock
ErrGetBlockNotFound :: Hash "BlockHeader" -> ErrGetBlock
data ErrGetBlockchainParams
ErrGetBlockchainParamsNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetBlockchainParams
ErrGetBlockchainParamsGenesisNotFound :: Hash "Genesis" -> ErrGetBlockchainParams
ErrGetBlockchainParamsIncompleteParams :: [ConfigParam] -> ErrGetBlockchainParams
data ErrGetDescendants
ErrGetDescendantsNetworkUnreachable :: ErrNetworkUnavailable -> ErrGetDescendants
ErrGetDescendantsParentNotFound :: Hash "BlockHeader" -> ErrGetDescendants

-- | Error while trying to get the node tip
data ErrCurrentNodeTip
ErrCurrentNodeTipNetworkUnreachable :: ErrNetworkUnavailable -> ErrCurrentNodeTip
ErrCurrentNodeTipNotFound :: ErrCurrentNodeTip

-- | Network is unavailable
data ErrNetworkUnavailable

-- | Cannot connect to network backend.
ErrNetworkUnreachable :: Text -> ErrNetworkUnavailable

-- | Network backend reports that the requested network is invalid.
ErrNetworkInvalid :: Text -> ErrNetworkUnavailable

-- | Error while trying to send a transaction
data ErrPostTx
ErrPostTxNetworkUnreachable :: ErrNetworkUnavailable -> ErrPostTx
ErrPostTxBadRequest :: Text -> ErrPostTx
ErrPostTxProtocolFailure :: Text -> ErrPostTx
data ErrStartup
ErrStartupNodeNotListening :: ErrStartup
ErrStartupCommandExited :: ProcessHasExited -> ErrStartup
ErrStartupGetBlockchainParameters :: ErrGetBlockchainParams -> ErrStartup
ErrStartupInvalidGenesisBlock :: FilePath -> ErrStartup
ErrStartupInvalidGenesisHash :: String -> ErrStartup
ErrStartupMissingIncentiveParameters :: ErrStartup
data ErrUnexpectedNetworkFailure
ErrUnexpectedNetworkFailure :: Link -> ClientError -> ErrUnexpectedNetworkFailure
data NetworkLayerLog
MsgLauncher :: LauncherLog -> NetworkLayerLog
MsgWaitForService :: WaitForServiceLog -> NetworkLayerLog

-- | Wrap a Jormungandr client into a <a>NetworkLayer</a> common interface.
--   
--   This version provides the full, raw blocks from
--   <a>Cardano.Wallet.Jormungandr.Binary</a>.
mkRawNetworkLayer :: forall m t block. (MonadBaseControl IO m, t ~ Jormungandr, block ~ Block) => BlockchainParameters -> Word -> MVar BlockHeaders -> JormungandrClient m -> NetworkLayer m t block
data BaseUrl
BaseUrl :: Scheme -> String -> Int -> String -> BaseUrl
[baseUrlScheme] :: BaseUrl -> Scheme
[baseUrlHost] :: BaseUrl -> String
[baseUrlPort] :: BaseUrl -> Int
[baseUrlPath] :: BaseUrl -> String
data Scheme
Http :: Scheme
Https :: Scheme
pattern Cursor :: () => BlockHeaders -> Cursor Jormungandr
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.NetworkLayerLog
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.NetworkLayerLog
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.ErrStartup
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.ErrStartup
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.Network.ErrStartup
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.Direction
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.Direction
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.JormungandrBackend
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.JormungandrBackend
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.JormungandrConfig
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.JormungandrConfig
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Network.JormungandrConnParams
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Network.JormungandrConnParams
instance Data.Text.Class.ToText Cardano.Wallet.Jormungandr.Network.NetworkLayerLog
instance Cardano.BM.Data.Tracer.HasPrivacyAnnotation Cardano.Wallet.Jormungandr.Network.NetworkLayerLog
instance Cardano.BM.Data.Tracer.HasSeverityAnnotation Cardano.Wallet.Jormungandr.Network.NetworkLayerLog
instance GHC.Exception.Type.Exception Cardano.Wallet.Jormungandr.Network.ErrStartup
instance Data.Text.Class.ToText Cardano.Wallet.Jormungandr.Network.JormungandrBackend

module Cardano.Wallet.Jormungandr.Transaction

-- | Construct a <a>TransactionLayer</a> compatible with Shelley and
--   <tt>Jörmungandr</tt>
newTransactionLayer :: forall k t. (t ~ Jormungandr, TxWitnessTagFor k, WalletKey k) => Hash "Genesis" -> TransactionLayer t k

-- | Transaction with improper number of inputs and outputs is tried
data ErrExceededInpsOrOuts
ErrExceededInpsOrOuts :: ErrExceededInpsOrOuts
instance GHC.Show.Show Cardano.Wallet.Jormungandr.Transaction.ErrExceededInpsOrOuts
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.Transaction.ErrExceededInpsOrOuts
instance Formatting.Buildable.Buildable Cardano.Wallet.Jormungandr.Transaction.ErrExceededInpsOrOuts
instance Cardano.Wallet.Jormungandr.Transaction.TxWitnessTagFor Cardano.Wallet.Primitive.AddressDerivation.Shelley.ShelleyKey
instance Cardano.Wallet.Jormungandr.Transaction.TxWitnessTagFor Cardano.Wallet.Primitive.AddressDerivation.Icarus.IcarusKey
instance Cardano.Wallet.Jormungandr.Transaction.TxWitnessTagFor Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey


-- | This module provides the main wallet server function for the
--   Jörmungandr backend.
--   
--   The <a>Cardano.Wallet.Jormungandr.Network</a> module handles
--   synchronization with the <tt>jormungandr</tt> process.
--   
--   The block format decoders are in
--   <a>Cardano.Wallet.Jormungandr.Network</a>.
--   
--   Functionality specific to this backend for creating transactions is in
--   <a>Cardano.Wallet.Jormungandr.Transaction</a>.
module Cardano.Wallet.Jormungandr

-- | The <tt>cardano-wallet-jormungandr</tt> main function. It takes the
--   configuration which was passed from the CLI and environment and starts
--   all components of the wallet.
serveWallet :: forall (n :: NetworkDiscriminant) t. (t ~ Jormungandr, NetworkDiscriminantVal n, DecodeAddress n, EncodeAddress n, DelegationAddress n ShelleyKey) => Tracers IO -> SyncTolerance -> Maybe FilePath -> HostPreference -> Listen -> JormungandrBackend -> (SockAddr -> Port "node" -> BlockchainParameters -> IO ()) -> IO ExitCode

-- | Covert a raw block to one that the <a>Cardano.Pool.Metrics</a> module
--   accepts.
toSPBlock :: Block -> Block

-- | The types of trace events produced by the Jörmungandr API server.
data Tracers' f
Tracers :: f ApplicationLog -> f ApiLog -> f (WorkerLog WalletId WalletLog) -> f DBLog -> f (WorkerLog Text StakePoolLog) -> f DBLog -> f NetworkLayerLog -> f NtpTrace -> Tracers' f
[applicationTracer] :: Tracers' f -> f ApplicationLog
[apiServerTracer] :: Tracers' f -> f ApiLog
[walletEngineTracer] :: Tracers' f -> f (WorkerLog WalletId WalletLog)
[walletDbTracer] :: Tracers' f -> f DBLog
[stakePoolEngineTracer] :: Tracers' f -> f (WorkerLog Text StakePoolLog)
[stakePoolDbTracer] :: Tracers' f -> f DBLog
[networkTracer] :: Tracers' f -> f NetworkLayerLog
[ntpClientTracer] :: Tracers' f -> f NtpTrace

-- | All of the Jörmungandr <a>Tracer</a>s.
type Tracers m = Tracers' (Tracer m)

-- | The minimum severities for <a>Tracers'</a>. <a>Nothing</a> indicates
--   that tracing is completely disabled.
type TracerSeverities = Tracers' (Const (Maybe Severity))

-- | Strings that the user can refer to tracers by.
tracerLabels :: Tracers' (Const Text)

-- | Names and descriptions of the tracers, for user documentation.
tracerDescriptions :: [(String, String)]

-- | Use a <a>nullTracer</a> for each of the <a>Tracer</a>s in
--   <a>Tracers'</a>
nullTracers :: Monad m => Tracers m

-- | Set up tracing with textual log messages.
setupTracers :: TracerSeverities -> Trace IO Text -> Tracers IO

-- | Construct a <a>TracerSeverities</a> record with all tracers set to the
--   given severity.
tracerSeverities :: Maybe Severity -> TracerSeverities

-- | Log messages related to application startup and shutdown.
data ApplicationLog
MsgStarting :: JormungandrBackend -> ApplicationLog
MsgNetworkName :: Text -> ApplicationLog
MsgWalletStartupError :: ErrStartup -> ApplicationLog
MsgServerStartupError :: ListenError -> ApplicationLog
instance GHC.Classes.Eq Cardano.Wallet.Jormungandr.ApplicationLog
instance GHC.Show.Show Cardano.Wallet.Jormungandr.ApplicationLog
instance GHC.Generics.Generic Cardano.Wallet.Jormungandr.ApplicationLog
instance GHC.Show.Show (Cardano.Wallet.Jormungandr.Tracers' (Data.Functor.Const.Const (GHC.Maybe.Maybe Cardano.BM.Data.Severity.Severity)))
instance GHC.Classes.Eq (Cardano.Wallet.Jormungandr.Tracers' (Data.Functor.Const.Const (GHC.Maybe.Maybe Cardano.BM.Data.Severity.Severity)))
instance Data.Text.Class.ToText Cardano.Wallet.Jormungandr.ApplicationLog
instance Cardano.BM.Data.Tracer.HasPrivacyAnnotation Cardano.Wallet.Jormungandr.ApplicationLog
instance Cardano.BM.Data.Tracer.HasSeverityAnnotation Cardano.Wallet.Jormungandr.ApplicationLog
