-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Wallet backend protocol-specific bits implemented using Shelley nodes
--   
--   Please see README.md
@package cardano-wallet-shelley
@version 2020.5.6


-- | API handlers and server using the underlying wallet layer to provide
--   endpoints reachable through HTTP.
module Cardano.Wallet.Shelley.Api.Server

-- | A diminished servant server to serve Byron wallets only.
server :: forall t n. (Buildable (ErrValidateSelection t), PaymentAddress n IcarusKey, PaymentAddress n ByronKey) => ApiLayer (RndState n) t ByronKey -> ApiLayer (SeqState n IcarusKey) t IcarusKey -> ApiLayer (SeqState n ShelleyKey) t ShelleyKey -> NtpClient -> Server (Api n)


-- | Conversion functions and static chain settings for Shelley.
module Cardano.Wallet.Shelley.Compatibility
data Shelley
type ShelleyBlock = ShelleyBlock TPraosStandardCrypto
type NodeVersionData = (NodeToClientVersionData, CodecCBORTerm Text NodeToClientVersionData)
data TPraosStandardCrypto

-- | Settings for configuring a MainNet network client
mainnetVersionData :: NodeVersionData

-- | Settings for configuring a TestNet network client
testnetVersionData :: ProtocolMagic -> NodeVersionData
mainnetBlockchainParameters :: GenesisBlockParameters
emptyGenesis :: BlockchainParameters -> Block
genesisTip :: Tip (ShelleyBlock TPraosStandardCrypto)
toShelleyHash :: Hash "BlockHeader" -> ShelleyHash c
toEpochSize :: EpochLength -> EpochSize

-- | SealedTx are the result of rightfully constructed shelely transactions
--   so, it is relatively safe to unserialize them from CBOR.
toGenTx :: HasCallStack => SealedTx -> GenTx ShelleyBlock
toPoint :: Hash "Genesis" -> EpochLength -> BlockHeader -> Point ShelleyBlock
toSlotNo :: EpochLength -> SlotId -> SlotNo
fromBlockNo :: BlockNo -> Quantity "block" Word32
fromShelleyBlock :: Hash "Genesis" -> EpochLength -> ShelleyBlock -> Block
fromShelleyHash :: ShelleyHash c -> Hash "BlockHeader"
fromPrevHash :: Hash "BlockHeader" -> PrevHash TPraosStandardCrypto -> Hash "BlockHeader"
fromChainHash :: Hash "Genesis" -> ChainHash ShelleyBlock -> Hash "BlockHeader"

-- | Convert genesis data into blockchain params and an initial set of UTxO
fromGenesisData :: ShelleyGenesis TPraosStandardCrypto -> (GenesisBlockParameters, [TxOut])
fromNetworkMagic :: NetworkMagic -> ProtocolMagic
fromSlotNo :: EpochLength -> SlotNo -> SlotId
fromTip :: Hash "Genesis" -> EpochLength -> Tip ShelleyBlock -> BlockHeader
fromPParams :: PParams -> TxParameters


-- | Network Layer for talking to Haskell re-written nodes.
--   
--   Good to read before / additional resources:
--   
--   <ul>
--   <li>Module's documentation in
--   `ouroboros-network/typed-protocols/src/Network/TypedProtocols.hs`</li>
--   <li>Data Diffusion and Peer Networking in Shelley (see:
--   <a>https://raw.githubusercontent.com/wiki/input-output-hk/cardano-wallet/data_diffusion_and_peer_networking_in_shelley.pdf)</a></li>
--   <li>In particular sections 4.1, 4.2, 4.6 and 4.8</li>
--   </ul>
module Cardano.Wallet.Shelley.Network
pattern Cursor :: () => Point ShelleyBlock -> TQueue m (ChainSyncCmd ShelleyBlock m) -> Cursor (m Shelley)

-- | Create an instance of the network layer
withNetworkLayer :: Tracer IO NetworkLayerLog -> GenesisBlockParameters -> FilePath -> (NodeToClientVersionData, CodecCBORTerm Text NodeToClientVersionData) -> (NetworkLayer IO (IO Shelley) ShelleyBlock -> IO a) -> IO a
data NetworkLayerLog
instance Data.Text.Class.ToText Cardano.Wallet.Shelley.Network.NetworkLayerLog
instance Cardano.BM.Data.Tracer.HasPrivacyAnnotation Cardano.Wallet.Shelley.Network.NetworkLayerLog
instance Cardano.BM.Data.Tracer.HasSeverityAnnotation Cardano.Wallet.Shelley.Network.NetworkLayerLog


-- | Working with Shelley transactions.
module Cardano.Wallet.Shelley.Transaction
newTransactionLayer :: forall (n :: NetworkDiscriminant) k t. t ~ IO Shelley => Proxy n -> ProtocolMagic -> TransactionLayer t k

-- | Construct a ("fake") genesis block from genesis transaction outputs.
--   
--   The genesis data on haskell nodes is not a block at all, unlike the
--   block0 on jormungandr. This function is a method to deal with the
--   discrepancy.
genesisBlockFromTxOuts :: BlockchainParameters -> [TxOut] -> Block
instance Formatting.Buildable.Buildable Cardano.Wallet.Shelley.Transaction.ErrInvalidTxOutAmount


-- | This module provides the main wallet server function for Shelley.
--   
--   The <a>Cardano.Wallet.Shelley.Network</a> uses the mini-protocols
--   (ChainSync and TxSubmission) to talk with a core node and synchronize
--   with the network.
--   
--   Functionality specific to this backend for creating transactions is in
--   <a>Cardano.Wallet.Shelley.Transaction</a>
module Cardano.Wallet.Shelley

-- | Encapsulate a network discriminant and the necessary constraints it
--   should satisfy.
data SomeNetworkDiscriminant
[SomeNetworkDiscriminant] :: forall (n :: NetworkDiscriminant). (NetworkDiscriminantVal n, PaymentAddress n IcarusKey, PaymentAddress n ByronKey, PaymentAddress n ShelleyKey, DecodeAddress n, EncodeAddress n) => Proxy n -> SomeNetworkDiscriminant

-- | The <tt>cardano-wallet-shelley</tt> main function. It takes the
--   configuration which was passed from the CLI and environment and starts
--   all components of the wallet.
serveWallet :: forall t. t ~ IO Shelley => SomeNetworkDiscriminant -> Tracers IO -> SyncTolerance -> Maybe FilePath -> HostPreference -> Listen -> Maybe TlsConfiguration -> FilePath -> Block -> (GenesisBlockParameters, (NodeToClientVersionData, CodecCBORTerm Text NodeToClientVersionData)) -> (SockAddr -> IO ()) -> IO ExitCode

-- | The types of trace events produced by the Shelley API server.
data Tracers' f
Tracers :: f ApplicationLog -> f ApiLog -> f (WorkerLog WalletId WalletLog) -> f DBLog -> f NtpTrace -> f NetworkLayerLog -> Tracers' f
[applicationTracer] :: Tracers' f -> f ApplicationLog
[apiServerTracer] :: Tracers' f -> f ApiLog
[walletEngineTracer] :: Tracers' f -> f (WorkerLog WalletId WalletLog)
[walletDbTracer] :: Tracers' f -> f DBLog
[ntpClientTracer] :: Tracers' f -> f NtpTrace
[networkTracer] :: Tracers' f -> f NetworkLayerLog

-- | All of the Shelley <a>Tracer</a>s.
type Tracers m = Tracers' (Tracer m)

-- | The minimum severities for <a>Tracers'</a>. <a>Nothing</a> indicates
--   that tracing is completely disabled.
type TracerSeverities = Tracers' (Const (Maybe Severity))

-- | Strings that the user can refer to tracers by.
tracerLabels :: Tracers' (Const Text)

-- | Names and descriptions of the tracers, for user documentation.
tracerDescriptions :: [(String, String)]

-- | Set up tracing with textual log messages.
setupTracers :: TracerSeverities -> Trace IO Text -> Tracers IO

-- | Construct a <a>TracerSeverities</a> record with all tracers set to the
--   given severity.
tracerSeverities :: Maybe Severity -> TracerSeverities

-- | Use a <a>nullTracer</a> for each of the <a>Tracer</a>s in
--   <a>Tracers'</a>
nullTracers :: Monad m => Tracers m

-- | Log messages related to application startup and shutdown.
data ApplicationLog
MsgStarting :: FilePath -> ApplicationLog
MsgNetworkName :: Text -> ApplicationLog
MsgServerStartupError :: ListenError -> ApplicationLog
instance GHC.Classes.Eq Cardano.Wallet.Shelley.ApplicationLog
instance GHC.Show.Show Cardano.Wallet.Shelley.ApplicationLog
instance GHC.Generics.Generic Cardano.Wallet.Shelley.ApplicationLog
instance GHC.Show.Show Cardano.Wallet.Shelley.SomeNetworkDiscriminant
instance GHC.Show.Show (Cardano.Wallet.Shelley.Tracers' (Data.Functor.Const.Const (GHC.Maybe.Maybe Cardano.BM.Data.Severity.Severity)))
instance GHC.Classes.Eq (Cardano.Wallet.Shelley.Tracers' (Data.Functor.Const.Const (GHC.Maybe.Maybe Cardano.BM.Data.Severity.Severity)))
instance Data.Text.Class.ToText Cardano.Wallet.Shelley.ApplicationLog
instance Cardano.BM.Data.Tracer.HasPrivacyAnnotation Cardano.Wallet.Shelley.ApplicationLog
instance Cardano.BM.Data.Tracer.HasSeverityAnnotation Cardano.Wallet.Shelley.ApplicationLog


-- | Provides a function to launch cardano-node for <i>testing</i>.
module Cardano.Wallet.Shelley.Launch

-- | Spins up a <tt>cardano-node</tt> in another process.
--   
--   IMPORTANT: <tt>cardano-node</tt> must be available on the current
--   path.
withCardanoNode :: Trace IO Text -> FilePath -> Severity -> (FilePath -> Block -> (GenesisBlockParameters, NodeVersionData) -> IO a) -> IO a
data NetworkConfiguration
[TestnetConfig] :: FilePath -> NetworkConfiguration

-- | <ul>
--   <li>-node-socket=FILE</li>
--   </ul>
nodeSocketOption :: Parser FilePath

-- | <ul>
--   <li>-testnet=FILE</li>
--   </ul>
networkConfigurationOption :: Parser NetworkConfiguration
parseGenesisData :: NetworkConfiguration -> ExceptT String IO (SomeNetworkDiscriminant, GenesisBlockParameters, NodeVersionData, Block)
instance GHC.Show.Show Cardano.Wallet.Shelley.Launch.NetworkConfiguration


-- | Size estimation of cbor-encoded transactions in Shelley
module Cardano.Wallet.Shelley.Transaction.Size
class MinSizeOf (t :: *) (n :: NetworkDiscriminant) (k :: Depth -> * -> *)
minSizeOf :: MinSizeOf t n k => Int
class MaxSizeOf (t :: *) (n :: NetworkDiscriminant) (k :: Depth -> * -> *)
maxSizeOf :: MaxSizeOf t n k => Int
sizeOfSignedTx :: [TxIn] -> [TxOut] -> Int
instance Cardano.Wallet.Shelley.Transaction.Size.MinSizeOf Cardano.Wallet.Primitive.Types.Address 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet Cardano.Wallet.Primitive.AddressDerivation.Icarus.IcarusKey
instance Cardano.Wallet.Shelley.Transaction.Size.MinSizeOf Cardano.Wallet.Primitive.Types.Address ('Cardano.Wallet.Primitive.AddressDerivation.Testnet pm) Cardano.Wallet.Primitive.AddressDerivation.Icarus.IcarusKey
instance Cardano.Wallet.Shelley.Transaction.Size.MinSizeOf Cardano.Wallet.Primitive.Types.Address 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
instance Cardano.Wallet.Shelley.Transaction.Size.MinSizeOf Cardano.Wallet.Primitive.Types.Address ('Cardano.Wallet.Primitive.AddressDerivation.Testnet pm) Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
instance Cardano.Wallet.Shelley.Transaction.Size.MaxSizeOf Cardano.Wallet.Primitive.Types.Address 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet Cardano.Wallet.Primitive.AddressDerivation.Icarus.IcarusKey
instance Cardano.Wallet.Shelley.Transaction.Size.MaxSizeOf Cardano.Wallet.Primitive.Types.Address ('Cardano.Wallet.Primitive.AddressDerivation.Testnet pm) Cardano.Wallet.Primitive.AddressDerivation.Icarus.IcarusKey
instance Cardano.Wallet.Shelley.Transaction.Size.MaxSizeOf Cardano.Wallet.Primitive.Types.Address 'Cardano.Wallet.Primitive.AddressDerivation.Mainnet Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
instance Cardano.Wallet.Shelley.Transaction.Size.MaxSizeOf Cardano.Wallet.Primitive.Types.Address ('Cardano.Wallet.Primitive.AddressDerivation.Testnet pm) Cardano.Wallet.Primitive.AddressDerivation.Byron.ByronKey
