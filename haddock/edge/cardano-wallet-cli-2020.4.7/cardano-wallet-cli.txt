-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Utilities for a building Command-Line Interfaces
--   
--   Utilities for a building Command-Line Interfaces
@package cardano-wallet-cli
@version 2020.4.7


-- | Shared types and helpers for CLI parsing
module Cardano.CLI

-- | Construct a CLI from a list of a commands
--   
--   <pre>
--   &gt;&gt;&gt; runCli $ cli $ cmdA &lt;&gt; cmdB &lt;&gt; cmdC
--   </pre>
cli :: Mod CommandFields a -> ParserInfo a

-- | Runs a specific command parser using appropriate preferences
runCli :: ParserInfo (IO ()) -> IO ()
cmdMnemonic :: Mod CommandFields (IO ())
cmdMnemonicByron :: Mod CommandFields (IO ())
cmdWallet :: ToJSON wallet => CmdWalletCreate wallet -> WalletClient wallet -> Mod CommandFields (IO ())
cmdWalletCreate :: WalletClient ApiWallet -> Mod CommandFields (IO ())
cmdByronWalletCreate :: WalletClient ApiByronWallet -> Mod CommandFields (IO ())

-- | cardano-wallet transaction
cmdTransaction :: ToJSON wallet => TransactionClient -> WalletClient wallet -> Mod CommandFields (IO ())
cmdAddress :: AddressClient -> Mod CommandFields (IO ())
cmdStakePool :: StakePoolClient -> Mod CommandFields (IO ())
cmdNetwork :: NetworkClient -> Mod CommandFields (IO ())
cmdVersion :: Mod CommandFields (IO ())
cmdKey :: Mod CommandFields (IO ())

-- | Helper for writing an option <a>Parser</a> using a <a>FromText</a>
--   instance.
optionT :: FromText a => Mod OptionFields a -> Parser a

-- | Helper for writing an argument <a>Parser</a> using a <a>FromText</a>
--   instance.
argumentT :: FromText a => Mod ArgumentFields a -> Parser a

-- | <ul>
--   <li>-database=DIR</li>
--   </ul>
databaseOption :: Parser FilePath

-- | <ul>
--   <li><i>--listen-address=HOSTSPEC</i> , default: 127.0.0.1</li>
--   </ul>
hostPreferenceOption :: Parser HostPreference

-- | <ul>
--   <li><i>--random-port|--port=INT</i></li>
--   </ul>
listenOption :: Parser Listen

-- | <ul>
--   <li><i>--node-port=INT</i> , default: 8080</li>
--   </ul>
nodePortOption :: Parser (Port "Node")

-- | <ul>
--   <li><i>--node-port=INT</i> , default: use any available port</li>
--   </ul>
nodePortMaybeOption :: Parser (Maybe (Port "Node"))

-- | <ul>
--   <li><i>--shutdown-handler</i></li>
--   </ul>
shutdownHandlerFlag :: Parser Bool

-- | <ul>
--   <li>-state-dir=DIR, default:
--   ~<i>.cardano-wallet</i>$backend/$network</li>
--   </ul>
stateDirOption :: FilePath -> Parser (Maybe FilePath)

-- | <ul>
--   <li>-sync-tolerance=DURATION, default: 300s</li>
--   </ul>
syncToleranceOption :: Parser SyncTolerance
tlsOption :: Parser TlsConfiguration
data LoggingOptions tracers
LoggingOptions :: Severity -> tracers -> Maybe Void -> LoggingOptions tracers
[$sel:loggingMinSeverity:LoggingOptions] :: LoggingOptions tracers -> Severity
[$sel:loggingTracers:LoggingOptions] :: LoggingOptions tracers -> tracers
[$sel:loggingTracersDoc:LoggingOptions] :: LoggingOptions tracers -> Maybe Void

-- | A hidden "helper" option which always fails, but shows info about the
--   logging options.
helperTracing :: [(String, String)] -> Parser (a -> a)
loggingOptions :: Parser tracers -> Parser (LoggingOptions tracers)
loggingSeverities :: [(String, Severity)]
loggingSeverityOrOffReader :: ReadM (Maybe Severity)
loggingSeverityReader :: ReadM Severity

-- | Wrapper type around <a>Text</a> to make its semantic more explicit
data Service
data TxId

-- | Represents the number of words in a mnemonic sentence.
--   
--   Only valid sizes are representable by this type.
data MnemonicSize
MS_9 :: MnemonicSize
MS_12 :: MnemonicSize
MS_15 :: MnemonicSize
MS_18 :: MnemonicSize
MS_21 :: MnemonicSize
MS_24 :: MnemonicSize

-- | Port number with a tag for describing what it is used for
newtype Port (tag :: Symbol)
Port :: Int -> Port
[$sel:getPort:Port] :: Port -> Int

-- | Record with mnemonic and key derivation funcionality â€” <i>without</i>
--   any type parameters related to scheme.
--   
--   This means that we can have a value for byron, a value for icarus,
--   both with the same type <tt>CliKeyScheme</tt>.
--   
--   <tt>CliKeyScheme</tt> is on the other hand parameterized over
--   <tt>key</tt> and <tt>m</tt>. <tt>hoistKeyScheme</tt> is provided for
--   mapping over <tt>m</tt>. <tt>mapKey</tt> is provided for mapping over
--   <tt>key</tt>.
--   
--   This way we can test mapping <tt>XPrv</tt>s to <tt>Text</tt> as pure
--   code in <tt>Either String</tt>, rather than <tt>IO</tt>.
data CliKeyScheme key m
CliKeyScheme :: [Int] -> ([Text] -> m key) -> (key -> DerivationIndex -> m key) -> (key -> m key) -> (key -> m Text) -> CliKeyScheme key m
[$sel:allowedWordLengths:CliKeyScheme] :: CliKeyScheme key m -> [Int]
[$sel:mnemonicToRootKey:CliKeyScheme] :: CliKeyScheme key m -> [Text] -> m key
[$sel:deriveChildKey:CliKeyScheme] :: CliKeyScheme key m -> key -> DerivationIndex -> m key
[$sel:toPublic:CliKeyScheme] :: CliKeyScheme key m -> key -> m key
[$sel:inspect:CliKeyScheme] :: CliKeyScheme key m -> key -> m Text
newtype DerivationIndex
DerivationIndex :: Word32 -> DerivationIndex
[$sel:unDerivationIndex:DerivationIndex] :: DerivationIndex -> Word32
newtype DerivationPath
DerivationPath :: [DerivationIndex] -> DerivationPath
data XPrvOrXPub
AXPrv :: XPrv -> XPrvOrXPub
AXPub :: XPub -> XPrvOrXPub
newCliKeyScheme :: ByronWalletStyle -> CliKeyScheme XPrvOrXPub (Either String)

-- | Pair of functions representing the bidirectional transformation
--   between a <tt>XPrvOrXPub</tt> and its hex-encoded form.
keyHexCodec :: (XPrvOrXPub -> Either String Text, Text -> Either String XPrvOrXPub)

-- | Change the underlying monad of a <tt>CliKeyScheme</tt>.
hoistKeyScheme :: (forall a. m1 a -> m2 a) -> CliKeyScheme key m1 -> CliKeyScheme key m2

-- | Map over the key type of a CliKeyScheme.
--   
--   <tt>deriveChildKey</tt> both takes a key as an argument and returns
--   one. Therefore we need a bidirectional mapping between the two key
--   types.
mapKey :: Monad m => (key1 -> m key2, key2 -> m key1) -> CliKeyScheme key1 m -> CliKeyScheme key2 m
firstHardenedIndex :: Word32

-- | Run an action with logging available and configured. When the action
--   is finished (normally or otherwise), log messages are flushed.
withLogging :: Maybe FilePath -> Severity -> ((Configuration, Trace IO Text) -> IO a) -> IO a

-- | Like <a>hPutErrLn</a> but with provided default <a>Handle</a>
putErrLn :: Text -> IO ()

-- | Print an error message in red
hPutErrLn :: Handle -> Text -> IO ()

-- | The IOHK logging framework prints out ANSI colour codes with its
--   messages. On Windows 10 and above it's possible to enable processing
--   of these colour codes. The <a>hSupportsANSIWithoutEmulation</a>
--   function does this as a side effect. On older versions of Windows,
--   special treatment is required (see: <a>ANSI</a>). In this case, this
--   function will achieve nothing, and the ANSI control characters will be
--   printed in grey (too bad).
enableWindowsANSI :: IO ()

-- | Like <a>hGetLine</a> but with default handles
getLine :: Buildable e => Text -> (Text -> Either e a) -> IO (a, Text)

-- | Prompt user and parse the input. Re-prompt on invalid inputs.
hGetLine :: Buildable e => (Handle, Handle) -> Text -> (Text -> Either e a) -> IO (a, Text)

-- | Like <a>hGetSensitiveLine</a> but with default handles
getSensitiveLine :: Buildable e => Text -> (Text -> Either e a) -> IO (a, Text)

-- | Gather user inputs until a newline is met, hiding what's typed with a
--   placeholder character.
hGetSensitiveLine :: Buildable e => (Handle, Handle) -> Text -> (Text -> Either e a) -> IO (a, Text)

-- | Decode API error messages and extract the corresponding message.
decodeError :: ByteString -> Maybe Text

-- | Look whether a particular filepath is correctly resolved on the
--   filesystem. This makes for a better user experience when passing wrong
--   filepaths via options or arguments, especially when they get forwarded
--   to other services.
requireFilePath :: FilePath -> IO ()

-- | Find the user data directory for a given node network backend.
getDataDir :: String -> IO FilePath

-- | Initialize a directory to store data such as blocks or the wallet
--   databases
setupDirectory :: (Text -> IO ()) -> FilePath -> IO ()

-- | Wait for a service to become available on a given TCP port. Exit on
--   failure with a proper error message.
waitForService :: Service -> Tracer IO WaitForServiceLog -> Port "node" -> IO () -> IO ()

-- | Log messages from <a>waitForService</a>
data WaitForServiceLog
MsgServiceWaiting :: Service -> Port "node" -> WaitForServiceLog
MsgServiceReady :: Service -> WaitForServiceLog
MsgServiceTimedOut :: Service -> WaitForServiceLog
MsgServiceErrNetworkInvalid :: Text -> WaitForServiceLog
instance GHC.Classes.Eq Cardano.CLI.WaitForServiceLog
instance GHC.Show.Show Cardano.CLI.WaitForServiceLog
instance GHC.Classes.Eq tracers => GHC.Classes.Eq (Cardano.CLI.LoggingOptions tracers)
instance GHC.Show.Show tracers => GHC.Show.Show (Cardano.CLI.LoggingOptions tracers)
instance GHC.Show.Show Cardano.CLI.Verbosity
instance GHC.Classes.Eq Cardano.CLI.Verbosity
instance GHC.Show.Show Cardano.CLI.TxId
instance GHC.Classes.Eq Cardano.CLI.TxId
instance GHC.Classes.Eq Cardano.CLI.Service
instance GHC.Show.Show Cardano.CLI.Service
instance Data.String.IsString Cardano.CLI.Service
instance GHC.Show.Show (Cardano.CLI.Port tag)
instance GHC.Classes.Ord (Cardano.CLI.Port tag)
instance GHC.Enum.Enum (Cardano.CLI.Port tag)
instance GHC.Generics.Generic (Cardano.CLI.Port tag)
instance GHC.Classes.Eq (Cardano.CLI.Port tag)
instance GHC.Show.Show Cardano.CLI.MnemonicSize
instance GHC.Generics.Generic Cardano.CLI.MnemonicSize
instance GHC.Classes.Eq Cardano.CLI.MnemonicSize
instance GHC.Enum.Enum Cardano.CLI.MnemonicSize
instance GHC.Enum.Bounded Cardano.CLI.MnemonicSize
instance GHC.Classes.Eq Cardano.CLI.DerivationPath
instance GHC.Show.Show Cardano.CLI.DerivationPath
instance GHC.Classes.Ord Cardano.CLI.DerivationIndex
instance GHC.Enum.Enum Cardano.CLI.DerivationIndex
instance GHC.Enum.Bounded Cardano.CLI.DerivationIndex
instance GHC.Classes.Eq Cardano.CLI.DerivationIndex
instance GHC.Show.Show Cardano.CLI.DerivationIndex
instance Data.Text.Class.ToText Cardano.CLI.WaitForServiceLog
instance Cardano.BM.Data.Tracer.HasPrivacyAnnotation Cardano.CLI.WaitForServiceLog
instance Cardano.BM.Data.Tracer.HasSeverityAnnotation Cardano.CLI.WaitForServiceLog
instance Data.Text.Class.FromText Cardano.CLI.TxId
instance GHC.Enum.Bounded (Cardano.CLI.Port tag)
instance Data.Text.Class.FromText (Cardano.CLI.Port tag)
instance Data.Text.Class.ToText (Cardano.CLI.Port tag)
instance Data.Text.Class.ToText Cardano.CLI.MnemonicSize
instance Data.Text.Class.FromText Cardano.CLI.MnemonicSize
instance Data.Text.Class.FromText Cardano.CLI.DerivationPath
instance Data.Text.Class.ToText Cardano.CLI.DerivationPath
instance Data.Text.Class.FromText Cardano.CLI.DerivationIndex
instance Data.Text.Class.ToText Cardano.CLI.DerivationIndex
