swagger: '2.0'
schemes: ["https"]
host: localhost
basePath: /v2
info:
  title: Cardano Wallet Backend API
  version: 2.0.0
  license:
    name: Apache-2.0
    url: https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/LICENSE
  description: |
    <p align="right"><img style="position: relative; top: -10em; margin-bottom: -12em;" width="20%" src="https://cardanodocs.com/img/cardano.png"></img></p>
externalDocs:
  description: Need more? Click here to access our API guide and walkthrough.
  url: https://github.com/input-output-hk/cardano-wallet/wiki
consumes: ["application/json"]
produces: ["application/json"]

#############################################################################
#                                                                           #
#                                 FIELDS                                    #
#                                                                           #
#############################################################################

x-date: &date
  type: string
  format: iso-8601-date-and-time
  example: 2019-02-27T14:46:45Z

x-slotNumber: &slotNumber
  type: integer
  minimum: 0
  example: 1337

x-epochNumber: &epochNumber
  type: integer
  minimum: 0
  example: 14

x-numberOfBlocks: &numberOfBlocks
  type: object
  required:
    - quantity
    - unit
  properties:
    quantity:
      type: integer
      minimum: 0
      example: 1337
    unit:
      type: string
      enum:
        - block
      example: "block"

x-blockReference: &blockReference
  description: A reference to a particular block.
  type: object
  required:
    - slot_number
    - epoch_number
    - height
  properties:
    slot_number: *slotNumber
    epoch_number: *epochNumber
    height: *numberOfBlocks

x-genesisBlock: &genesisBlock
  description: A reference to a particular block.
  type: object
  required:
    - slot_number
    - epoch_number
  properties:
    slot_number:
      <<: *slotNumber
      maximum: 0
      example: 0
    epoch_number:
      <<: *epochNumber
      maximum: 0
      example: 0

x-percentage: &percentage
  type: object
  required:
    - quantity
    - unit
  properties:
    quantity:
      type: number
      minimum: 0
      maximum: 100
      example: 42
    unit:
      type: string
      enum:
        - percent

x-syncProgress: &syncProgress
  type: object
  required:
    - status
  properties:
    status:
      type: string
      enum:
        - ready
        - syncing
    progress:
      <<: *percentage
      description: |
        <span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;">
        <strong>if:</strong> status == syncing
        </span><br/>
  example:
    status: ready

x-amount: &amount
  description: Coins, in Lovelace
  type: object
  required:
    - quantity
    - unit
  properties:
    quantity:
      type: integer
      minimum: 0
      example: 42000000
    unit:
      type: string
      enum:
        - lovelace

x-addressId: &addressId
  type: string
  format: base58|bech32
  example: addr1sjck9mdmfyhzvjhydcjllgj9vjvl522w0573ncustrrr2rg7h9azg4cyqd36yyd48t5ut72hgld0fg2xfvz82xgwh7wal6g2xt8n996s3xvu5g

x-addressState: &addressState
  type: string
  enum:
    - used
    - unused

x-stakePoolId: &stakePoolId
  type: string
  format: hex
  minLength: 64
  maxLength: 64
  example: 42bf330e9653fef8a47a5aab2f2e74db8a5b947e
  description: A unique identifier for the pool.

x-walletId: &walletId
  description: A unique identifier for the wallet
  type: string
  format: hex
  maxLength: 40
  minLength: 40
  example: 2512a00e9653fe49a44a5886202e24d77eeb998f

x-walletName: &walletName
  type: string
  maxLength: 255
  minLength: 1
  example: Alan's Wallet

x-walletMnemonicSentence: &walletMnemonicSentence
  description: A list of mnemonic words
  type: array
  minItems: 15
  maxItems: 24
  items:
    type: string
    format: bip-0039-mnemonic-word{english}
  example: ["squirrel", "material", "silly", "twice", "direct", "slush", "pistol", "razor", "become", "junk", "kingdom", "flee", "squirrel", "silly", "twice"]

x-walletSecondFactor: &walletSecondFactor
  description: An optional passphrase used to encrypt the mnemonic sentence.
  type: array
  minItems: 9
  maxItems: 12
  items:
    type: string
    format: bip-0039-mnemonic-word{english}
  example: ["squirrel", "material", "silly", "twice", "direct", "slush", "pistol", "razor", "become"]

x-walletPassphrase: &walletPassphrase
  description: A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
  type: string
  minLength: 10
  maxLength: 255
  example: Secure Passphrase

x-walletAddressPoolGap: &walletAddressPoolGap
  description: Number of consecutive unused addresses allowed
  type: integer
  minimum: 10
  maximum: 100
  example: 20
  default: 20

x-walletState: &walletState
  <<: *syncProgress
  description: Whether a wallet is ready to use or still syncing

x-walletBalance: &walletBalance
  description: Wallet current balance(s)
  type: object
  required:
    - available
    - reward
    - total
  properties:
    available:
      <<: *amount
      description: Available balance (funds that can be spent)
    reward:
      <<: *amount
      description: The balance of the reward account for this wallet.
    total:
      <<: *amount
      description: Total balance (available balance plus pending change)

x-byronWalletBalance: &byronWalletBalance
  description: Byron wallet's current balance(s)
  type: object
  required:
    - available
    - total
  properties:
    available:
      <<: *amount
      description: Available balance (funds that can be spent)
    total:
      <<: *amount
      description: Total balance (available balance plus pending change)

x-walletDelegation: &walletDelegation
  description: Delegation settings
  type: object
  required:
    - status
  properties:
    status:
      type: string
      enum:
        - not_delegating
        - delegating
    target:
      <<: *stakePoolId
      description: A unique Stake-Pool identifier (present only if status = `delegating`)
  example:
    status: delegating
    target: 2cWKMJemoBam7gg1y5K2aFDhAm5L8fVc96NfxgcGhdLMFTsToNAU9t5HVdBBQKy4iDswL

x-walletPassphraseInfo :: &walletPassphraseInfo
  description: Information about the wallet's passphrase
  type: object
  required:
    - last_updated_at
  properties:
    last_updated_at: *date

x-transactionId: &transactionId
  description: A unique identifier for this transaction
  type: string
  format: hex
  maxLength: 64
  minLength: 64
  example: 1423856bc91c49e928f6f30f4e8d665d53eb4ab6028bd0ac971809d514c92db1

x-transactionAmount: &transactionAmount
  <<: *amount

x-transactionInsertedAt: &transactionInsertedAt
  description: |
    <span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;">
    <strong>if:</strong> status != pending
    </span><br/>
    Absolute time at which the transaction was inserted in a block.
  type: object
  required:
    - block
    - time
  properties:
    time: *date
    block: *blockReference

x-transactionPendingSince: &transactionPendingSince
  description: |
    <span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;">
    <strong>if:</strong> status == pending
    </span><br/>
    The point in time at which a transaction became pending.
  type: object
  required:
    - block
    - time
  properties:
    time: *date
    block: *blockReference

x-transactionDepth: &transactionDepth
  description: Current depth of the transaction in the local chain
  <<: *numberOfBlocks

x-transactionDirection: &transactionDirection
  type: string
  enum:
    - outgoing
    - incoming

x-transactionInputs: &transactionInputs
  description: A list of transaction inputs
  type: array
  minItems: 0
  items:
    type: object
    required:
      - id
      - index
    properties:
      address: *addressId
      amount: *transactionAmount
      id: *transactionId
      index:
        type: integer
        minimum: 0

x-transactionOutputs: &transactionOutputs
  description: A list of target outputs
  type: array
  minItems: 0
  items:
    type: object
    required:
      - address
      - amount
    properties:
      address: *addressId
      amount: *transactionAmount

x-transactionResolvedInputs: &transactionResolvedInputs
  description: A list of transaction inputs
  type: array
  minItems: 0
  items:
    type: object
    required:
      - id
      - index
      - address
      - amount
    properties:
      address: *addressId
      amount: *transactionAmount
      id: *transactionId
      index:
        type: integer
        minimum: 0

x-signedTransactionBlob: &signedTransactionBlob
  description: Signed transaction message binary blob.
  type: string
  format: binary

x-transactionStatus: &transactionStatus
  description: |
    Current transaction status.

      ```
             *---------*
             |         |
      -------> PENDING <----------------*
             |         |                |
             *---------*            (rollback)
                  |                     |
             (in ledger)          *-----------*
                  |               |           |
                  *---------------> IN_LEDGER |
                                  |           |
                                  *-----------*
      ```
  type: string
  enum:
    - pending
    - in_ledger

x-stakePoolMetrics: &stakePoolMetrics
  type: object
  required:
    - controlled_stake
    - produced_blocks
  properties:
    controlled_stake: *transactionAmount
    produced_blocks:
      <<: *numberOfBlocks
      description: Number of blocks produced by a given stake pool

x-stakePoolApparentPerformance: &stakePoolApparentPerformance
  description: |
    Apparent performance of the stake pool over past epochs. This indicator is computed
    using data available to the server. In particular, the server can't reliably know the
    stake distribution of past epochs without being during those epochs. The performance
    are therefore an average measure that is more accurate for servers that are online
    often.

    The performance is a float with double-precision which is _typically_ within `0` and `1`:

      - `0` means that a pool is not performing well.
      - `1` means that a pool is performing _as expected_.
      - above `1` means the pool is performing beyond expectations.

    Pools that are lucky enough to win most of their slots early in the epoch will tend to look
    like they're over-performing for a while. Having a wallet regularly connected to the network
    would harmonize the performance and give better results.

  type: number
  minimum: 0
  example: 0.5053763440860215

x-stakePoolMetadata: &stakePoolMetadata
  description: |
    Information about the stake pool.
  type: object
  required:
    - owner
    - ticker
    - name
    - homepage
    - pledge_address
  additionalProperties: false
  properties:
    owner:
      type: string
      format: bech32
      example: ed25519_pk1lrspg0h4afh3l2kaneqlktdv9kaq4zskcvehqwhc4lmx36f5dweqjtaga8
    ticker:
      type: string
      minLength: 3
      maxLength: 5
      example: IOHK
    name:
      type: string
      minLength: 1
      maxLength: 50
    description:
      type: string
      maxLength: 255
    homepage:
      type: string
      format: uri
      example: https://iohk.io
    pledge_address:
      type: string
      format: bech32
      example: addr1sjck9mdmfyhzvjhydcjllgj9vjvl522w0573ncustrrr2rg7h9azg4cyqd36yyd48t5ut72hgld0fg2xfvz82xgwh7wal6g2xt8n996s3xvu5g

x-stakePoolCost: &stakePoolCost
  <<: *amount
  description: |
      Estimated cost set by the pool operator when registering his pool.
      This fixed cost is taken from each reward earned by the pool before splitting rewards between stakeholders.

x-stakePoolMargin: &stakePoolMargin
  <<: *percentage
  description: |
      Variable margin on the total reward given to an operator before splitting rewards between stakeholders.

x-stakePoolSaturation: &stakePoolSaturation
  type: number
  minimum: 0
  description: |
    Saturation-level of the pool based on the desired number of pools aimed by the network.
    A value above `1` indicates that the pool is saturated.
  example: 0.74

x-stakePoolDesirability: &stakePoolDesirability
  type: number
  minimum: 0
  description: |
    How desirable / attractive a pool is. To determine a pool's _rank_, we order pools by decreasing desirability.
    The most desirable pool gets rank 1, the second most desirable pool gets rank 2 and so on.
  example: 42

x-networkInformationSyncProgress: &networkInformationSyncProgress
  <<: *syncProgress
  description: |
    Estimated synchronization progress of the node with the underlying network. Note that this may
    change quite arbitrarily as the node may switch to shorter or longer chain forks.

x-networkInformationNtpStatus: &networkInformationNtpStatus
  type: object
  description: |
    [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) information of the server.

    **Important:** This piece of information only makes sense when the server runs on the same host machine as the node.
  required:
    - status
  properties:
    status:
      type: string
      enum:
        - unavailable
        - available
        - pending
    drift:
      type: object
      description: |
        <span style="position: relative; left: 35px; top: -21px; vertical-align: middle; background-color: rgba(142, 142, 220, 0.05); color: rgba(50, 50, 159, 0.9); margin: 0 5px; padding: 0 5px; border: 1px solid rgba(50, 50, 159, 0.1); line-height: 20px; font-size: 13px; border-radius: 2px;">
        <strong>if:</strong> status == available
        </span><br/>
        Drift offset of the local clock.
      required:
        - quantity
        - unit
      properties:
        quantity:
          type: integer
          minimum: 0
          example: 14
        unit:
          type: string
          enum:
            - microseconds

x-networkInformationNodeTip: &networkInformationNodeTip
  <<: *blockReference
  description: Underlying node's tip

x-networkInformationProtocolUpdate: &networkInformationProtocolUpdate
  type: string
  description: |
    Whether protocol updates have been submitted and accepted by the network.
  enum:
    - up_to_date
    - update_available


#############################################################################
#                                                                           #
#                              DEFINITIONS                                  #
#                                                                           #
#############################################################################

definitions:
  ApiAddress: &ApiAddress
    type: object
    required:
      - id
      - state
    properties:
      id: *addressId
      state: *addressState

  ApiEpochInfo: &ApiEpochInfo
    type: object
    required:
      - epoch_number
      - epoch_start_time
    properties:
      epoch_number: *epochNumber
      epoch_start_time: *date

  ApiNetworkTip: &ApiNetworkTip
    description: A network tip
    type: object
    required:
      - slot_number
      - epoch_number
    properties:
      slot_number: *slotNumber
      epoch_number: *epochNumber

  ApiNetworkInformation: &ApiNetworkInformation
    type: object
    required:
      - sync_progress
      - node_tip
      - network_tip
      - next_epoch
    properties:
      sync_progress: *networkInformationSyncProgress
      node_tip: *networkInformationNodeTip
      network_tip: *ApiNetworkTip
      next_epoch: *ApiEpochInfo

  ApiSelectCoinsData: &ApiSelectCoinsData
    type: object
    required:
      - payments
    properties:
      payments: *transactionOutputs

  ApiCoinSelection: &ApiCoinSelection
    type: object
    required:
      - inputs
      - outputs
    properties:
      inputs: *transactionResolvedInputs
      outputs: *transactionOutputs

  ApiStakePool: &ApiStakePool
    type: object
    required:
      - id
      - metrics
      - apparent_performance
      - cost
      - margin
      - saturation
      - desirability
    properties:
      id: *stakePoolId
      metrics: *stakePoolMetrics
      apparent_performance: *stakePoolApparentPerformance
      cost: *stakePoolCost
      margin: *stakePoolMargin
      metadata: *stakePoolMetadata
      saturation: *stakePoolSaturation
      desirability: *stakePoolDesirability

  ApiFee: &ApiFee
    type: object
    required:
      - amount
    properties:
      amount: *transactionAmount

  ApiTxId: &ApiTxId
    type: object
    required:
      - id
    properties:
      id: *transactionId

  ApiTransaction: &ApiTransaction
    type: object
    required:
      - id
      - amount
      - depth
      - direction
      - inputs
      - outputs
      - status
    properties:
      id: *transactionId
      amount: *transactionAmount
      inserted_at: *transactionInsertedAt
      pending_since: *transactionPendingSince
      depth: *transactionDepth
      direction: *transactionDirection
      inputs: *transactionInputs
      outputs: *transactionOutputs
      status: *transactionStatus

  ApiWallet: &ApiWallet
    type: object
    required:
      - id
      - address_pool_gap
      - balance
      - delegation
      - name
      - state
      - tip
    properties:
      id: *walletId
      address_pool_gap: *walletAddressPoolGap
      balance: *walletBalance
      delegation: *walletDelegation
      name: *walletName
      passphrase: *walletPassphraseInfo
      state: *walletState
      tip: *blockReference

  ApiByronWallet: &ApiByronWallet
    type: object
    required:
      - id
      - balance
      - name
      - state
      - tip
    properties:
      id: *walletId
      balance: *byronWalletBalance
      name: *walletName
      passphrase: *walletPassphraseInfo
      state: *walletState
      tip: *blockReference

  ApiByronWalletMigrationInfo: &ApiByronWalletMigrationInfo
    type: object
    required:
      - migration_cost
    properties:
      migration_cost: *amount

  ApiWalletPassphrase: &ApiWalletPassphrase
    type: object
    required:
      - passphrase
    properties:
      passphrase:
        <<: *walletPassphrase
        description: The source Byron wallet's master passphrase.

  ApiWalletUTxOsStatistics: &ApiWalletUTxOsStatistics
    type: object
    required:
      - total
      - scale
      - distribution
    properties:
      total: *amount
      scale:
        type: string
        enum:
          - log10
      distribution:
        type: object
        additionalProperties:
          type: integer
    example:
      total:
        quantity: 42000000
        unit: lovelace
      scale: log10
      distribution:
        10: 1
        100: 0
        1000: 8
        10000: 14
        100000: 32
        1000000: 3
        10000000: 0
        100000000: 12
        1000000000: 0
        10000000000: 0
        100000000000: 0
        1000000000000: 0
        10000000000000: 0
        100000000000000: 0
        1000000000000000: 0
        10000000000000000: 0
        45000000000000000: 0

  ApiWalletPostData: &ApiWalletPostData
    type: object
    required:
      - name
      - mnemonic_sentence
      - passphrase
    properties:
      name: *walletName
      mnemonic_sentence: *walletMnemonicSentence
      mnemonic_second_factor: *walletSecondFactor
      passphrase: *walletPassphrase
      address_pool_gap: *walletAddressPoolGap

  ApiByronWalletRandomPostData: &ApiByronWalletRandomPostData
    type: object
    required:
      - name
      - mnemonic_sentence
      - passphrase
    properties:
      name: *walletName
      passphrase: *walletPassphrase
      mnemonic_sentence:
        <<: *walletMnemonicSentence
        minItems: 12
        maxItems: 12

  ApiByronWalletIcarusPostData: &ApiByronWalletIcarusPostData
    type: object
    required:
      - name
      - mnemonic_sentence
      - passphrase
    properties:
      name: *walletName
      passphrase: *walletPassphrase
      mnemonic_sentence:
        <<: *walletMnemonicSentence
        minItems: 15
        maxItems: 15

  ApiByronWalletTrezorPostData: &ApiByronWalletTrezorPostData
    type: object
    required:
      - name
      - mnemonic_sentence
      - passphrase
    properties:
      name: *walletName
      passphrase: *walletPassphrase
      mnemonic_sentence:
        <<: *walletMnemonicSentence
        minItems: 12
        maxItems: 24

  ApiByronWalletLedgerPostData: &ApiByronWalletLedgerPostData
    type: object
    required:
      - name
      - mnemonic_sentence
      - passphrase
    properties:
      name: *walletName
      passphrase: *walletPassphrase
      mnemonic_sentence:
        <<: *walletMnemonicSentence
        minItems: 12
        maxItems: 24

  ApiWalletPutData: &ApiWalletPutData
    type: object
    properties:
      name: *walletName

  ApiWalletPutPassphraseData: &ApiWalletPutPassphraseData
    type: object
    required:
      - old_passphrase
      - new_passphrase
    properties:
      old_passphrase:
        <<: *walletPassphrase
        description: The current passphrase.
      new_passphrase:
        <<: *walletPassphrase
        description: A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds).

  ApiPostTransactionData: &ApiPostTransactionData
    type: object
    required:
      - payments
      - passphrase
    properties:
      payments: *transactionOutputs
      passphrase:
        <<: *walletPassphrase
        description: The wallet's master passphrase.

  ApiPostTransactionFeeData: &ApiPostTransactionFeeData
    type: object
    required:
      - payments
    properties:
      payments: *transactionOutputs

#############################################################################
#                                                                           #
#                               PARAMETERS                                  #
#                                                                           #
#############################################################################

x-parametersBody: &parametersBody
  in: body
  name: body
  required: true

x-parametersWalletId: &parametersWalletId
  in: path
  name: walletId
  required: true
  type: string
  format: hex
  maxLength: 40
  minLength: 40

x-parametersTransactionId: &parametersTransactionId
  in: path
  name: transactionId
  required: true
  type: string
  format: hex
  maxLength: 64
  minLength: 64

x-parametersStakePoolId: &parametersStakePoolId
  in: path
  name: stakePoolId
  required: true
  type: string
  format: hex
  maxLength: 64
  minLength: 64

x-parametersJoinStakePool: &parametersJoinStakePool
  type: object
  required:
    - passphrase
  properties:
    passphrase:
      <<: *walletPassphrase
      description: The wallet's master passphrase.

x-parametersQuitStakePool: &parametersQuitStakePool
  <<: *parametersJoinStakePool

x-parametersStartDate: &parametersStartDate
  in: query
  name: start
  type: string
  format: ISO 8601
  description: |
    An optional start time in ISO 8601 date-and-time format. Basic and
    extended formats are both accepted. Times can be local (with a
    timezone offset) or UTC.

    If both a start time and an end time are specified, then the start
    time must not be later than the end time.

    Example: `2008-08-08T08:08:08Z`

x-parametersEndDate: &parametersEndDate
  in: query
  name: end
  type: string
  format: ISO 8601
  description: |
    An optional end time in ISO 8601 date-and-time format. Basic and
    extended formats are both accepted. Times can be local (with a
    timezone offset) or UTC.

    If both a start time and an end time are specified, then the start
    time must not be later than the end time.

    Example: `2008-08-08T08:08:08Z`

x-parametersSortOrder: &parametersSortOrder
  in: query
  name: order
  type: string
  enum:
    - ascending
    - descending
  default: descending
  description: An optional sort order.

#############################################################################
#                                                                           #
#                                RESPONSES                                  #
#                                                                           #
#############################################################################

x-responsesErr: &responsesErr
  type: object
  required:
    - message
    - code
  properties:
    message:
      type: string
      description: A descriptive error message.
    code:
      type: string
      description: A specific error code for this error, more precise than HTTP ones.
      example: an_error_code

x-responsesErr400: &responsesErr400
  400:
    description: Bad Request
    schema: *responsesErr

x-responsesErr403: &responsesErr403
  403:
    description: Forbidden
    schema: *responsesErr

x-responsesErr404: &responsesErr404
  404:
    description: Not Found
    schema: *responsesErr

x-responsesErr405: &responsesErr405
  405:
    description: Method Not Allowed
    schema: *responsesErr

x-responsesErr406: &responsesErr406
  406:
    description: Not Acceptable
    schema: *responsesErr

x-responsesErr409: &responsesErr409
  409:
    description: Conflict
    schema: *responsesErr

x-responsesErr410: &responsesErr410
  410:
    description: Gone
    schema: *responsesErr

x-responsesErr415: &responsesErr415
  415:
    description: Unsupported Media Type
    schema: *responsesErr

x-responseErr423: &responsesErr423
  423:
    description: Locked
    schema: *responsesErr

x-responsesListWallets: &responsesListWallets
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    schema:
      type: array
      items: *ApiWallet

x-responsesListByronWallets: &responsesListByronWallets
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    schema:
      type: array
      items: *ApiByronWallet

x-responsesGetUTxOsStatistics: &responsesGetUTxOsStatistics
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    schema: *ApiWalletUTxOsStatistics

x-responsesPostWallet: &responsesPostWallet
  <<: *responsesErr400
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr409
  <<: *responsesErr415
  201:
    description: Created
    schema: *ApiWallet

x-responsesPostByronWallet: &responsesPostByronWallet
  <<: *responsesErr400
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr409
  <<: *responsesErr415
  201:
    description: Created
    schema: *ApiByronWallet

x-responsesGetWallet: &responsesGetWallet
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    schema: *ApiWallet

x-responsesGetByronWallet: &responsesGetByronWallet
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    schema: *ApiByronWallet

x-responsesGetByronWalletMigrationInfo: &responsesGetByronWalletMigrationInfo
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    schema: *ApiByronWalletMigrationInfo

x-responsesMigrateByronWallet: &responsesMigrateByronWallet
  <<: *responsesErr403
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr415
  200:
    description: Ok
    schema:
      type: array
      items: *ApiTransaction

x-responsesDeleteWallet: &responsesDeleteWallet
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  204:
    description: No Content

x-responsesForceResyncWallet: &responsesForceResyncWallet
  <<: *responsesErr400
  <<: *responsesErr403
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr415
  204:
    description: No Content

x-responsesPutWallet: &responsesPutWallet
  <<: *responsesErr400
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr415
  200:
    description: Ok
    schema: *ApiWallet

x-responsesPutWalletPassphrase: &responsesPutWalletPassphrase
  <<: *responsesErr400
  <<: *responsesErr403
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr415
  204:
    description: No Content

x-responsesSelectCoins: &responsesSelectCoins
  <<: *responsesErr400
  <<: *responsesErr403
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr415
  200:
    description: OK
    schema: *ApiCoinSelection

x-responsesDeleteTransaction: &responsesDeleteTransaction
  <<: *responsesErr403
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  204:
    description: No Content

x-responsesListTransactions: &responsesListTransactions
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    headers:
      Content-Range:
        type: string
        format: inserted-at {range-start}-{range-end}/{total}
    schema:
      type: array
      items: *ApiTransaction

x-responsesPostTransaction: &responsesPostTransaction
  <<: *responsesErr400
  <<: *responsesErr403
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr415
  202:
    description: Accepted
    schema: *ApiTransaction

x-responsesPostExternalTransaction: &responsesPostExternalTransaction
  <<: *responsesErr400
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr415
  202:
    description: Accepted
    schema: *ApiTxId

x-responsesPostTransactionFee: &responsesPostTransactionFee
  <<: *responsesErr400
  <<: *responsesErr403
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr415
  200:
    description: Ok
    schema:
      <<: *ApiFee

x-responsesGetDelegationFee: &responsesGetDelegationFee
  <<: *responsesErr403
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    schema:
        <<: *ApiFee

x-responsesListAddresses: &responsesListAddresses
  <<: *responsesErr400
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    schema:
      type: array
      items: *ApiAddress

x-responsesListStakePools: &responsesListStakePools
  <<: *responsesErr405
  200:
    description: Ok
    schema:
        type: array
        items: *ApiStakePool

x-responsesJoinStakePool: &responsesJoinStakePool
  <<: *responsesErr400
  <<: *responsesErr403
  <<: *responsesErr404
  <<: *responsesErr405
  <<: *responsesErr406
  <<: *responsesErr415
  202:
    description: Accepted
    schema: *ApiTransaction

x-responsesQuitStakePool: &responsesQuitStakePool
  <<: *responsesJoinStakePool

x-responsesGetNetworkInformation: &responsesGetNetworkInformation
  <<: *responsesErr405
  <<: *responsesErr406
  200:
    description: Ok
    schema: *ApiNetworkInformation


#############################################################################
#                                                                           #
#                                  PATHS                                    #
#                                                                           #
#############################################################################

x-tagGroups:
  - name: Shelley (Sequential)
    tags:
    - Wallets
    - Addresses
    - Coin Selections
    - Transactions
    - Stake Pools

  - name: Byron (Random)
    tags:
    - Byron Wallets
    - Byron Transactions
    - Byron Migrations

  - name: Miscellaneous
    tags:
    - Network
    - Proxy

paths:
  /wallets:
    get:
      operationId: listWallets
      tags: ["Wallets"]
      summary: List
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Return a list of known wallets, ordered from oldest to newest.
      responses: *responsesListWallets

    post:
      operationId: postWallet
      tags: ["Wallets"]
      summary: Create / Restore
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Create and restore a wallet from a mnemonic sentence.
      parameters:
        - <<: *parametersBody
          schema: *ApiWalletPostData
      responses: *responsesPostWallet

  /wallets/{walletId}:
    get:
      operationId: getWallet
      tags: ["Wallets"]
      summary: Get
      description: |
        <p align="right">status: <strong>stable</strong></p>
      parameters:
        - *parametersWalletId
      responses: *responsesGetWallet

    delete:
      operationId: deleteWallet
      tags: ["Wallets"]
      summary: Delete
      description: |
        <p align="right">status: <strong>stable</strong></p>
      parameters:
        - *parametersWalletId
      responses: *responsesDeleteWallet

    put:
      operationId: putWallet
      tags: ["Wallets"]
      summary: Update Metadata
      description: |
        <p align="right">status: <strong>stable</strong></p>
      parameters:
        - *parametersWalletId
        - <<: *parametersBody
          schema: *ApiWalletPutData
      responses: *responsesPutWallet

  /wallets/{walletId}/tip:
    put:
      operationId: forceResync
      tags: ["Wallets"]
      summary: Force Resync
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Force the wallet to rewind back to the given block and sync again with the chain.
        Any incoming transaction will be erased whereas outgoing transactions will be put back
        as pending. This action should only be taken as an extreme measure to resolve potential
        syncing issues. If its use is required, please submit a ticket to https://github.com/input-output-hk/cardano-wallet/issues.

        > ⚠️ At this stage, the server only allows resyncing to genesis (i.e. `(0,0)`).
        > Any other point will yield a `403 Forbidden` error.
      parameters:
        - *parametersWalletId
        - <<: *parametersBody
          schema: *genesisBlock
      responses: *responsesForceResyncWallet

  /wallets/{walletId}/statistics/utxos:
    get:
      operationId: getUTxOsStatistics
      tags: ["Wallets"]
      summary: UTxO Statistics
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Return the UTxOs distribution across the whole wallet, in the form of a histogram.

        ```
             │
         100 ─
             │
             │                                 ┌───┐
          10 ─                         ┌───┐   │   │                   ┌───┐
             │                 ┌───┐   │   │   │   │                   │   │
             │                 │   │   │   │   │   │   ┌───┐           │   │
           1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │
             │ │   │           │   │   │   │   │   │   │   │           │   │
             │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │
             └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────
                   10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳
        ```
      parameters:
        - *parametersWalletId
      responses: *responsesGetUTxOsStatistics

  /wallets/{walletId}/passphrase:
    put:
      operationId: putWalletPassphrase
      tags: ["Wallets"]
      summary: Update Passphrase
      description: |
        <p align="right">status: <strong>stable</strong></p>
      parameters:
        - *parametersWalletId
        - <<: *parametersBody
          schema: *ApiWalletPutPassphraseData
      responses: *responsesPutWalletPassphrase

  /wallets/{walletId}/transactions:
    get:
      operationId: listTransactions
      tags: ["Transactions"]
      summary: List
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Lists all incoming and outgoing wallet's transactions.
      parameters:
        - *parametersWalletId
        - *parametersStartDate
        - *parametersEndDate
        - *parametersSortOrder
      responses: *responsesListTransactions

    post:
      operationId: postTransaction
      tags: ["Transactions"]
      summary: Create
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Create and send transaction from the wallet.
      parameters:
        - *parametersWalletId
        - <<: *parametersBody
          schema: *ApiPostTransactionData
      responses: *responsesPostTransaction

  /wallets/{walletId}/transactions/fees:
    post:
      operationId: postTransactionFee
      tags: ["Transactions"]
      summary: Estimate Fee
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Estimate fee for the transaction.
      parameters:
        - *parametersWalletId
        - <<: *parametersBody
          schema: *ApiPostTransactionFeeData
      responses: *responsesPostTransactionFee

  /wallets/{walletId}/transactions/{transactionId}:
    delete:
      operationId: deleteTransaction
      tags: ["Transactions"]
      summary: Forget
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Forget pending transaction. Importantly, a transaction, when sent,
        cannot be cancelled. One can only request forgetting about it
        in order to try spending (concurrently) the same UTxO in another
        transaction. But, the transaction may still show up later in a block
        and therefore, appear in the wallet.
      parameters:
        - *parametersWalletId
        - *parametersTransactionId
      responses: *responsesDeleteTransaction

  /wallets/{walletId}/addresses:
    get:
      operationId: listAddresses
      tags: ["Addresses"]
      summary: List
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Return a list of known addresses, ordered from newest to oldest
      parameters:
        - *parametersWalletId
        - in: query
          name: state
          type: string
          enum:
            - used
            - unused
          description: An optional filter on the address state.
      responses: *responsesListAddresses

  /stake-pools:
    get:
      operationId: listStakePools
      tags: ["Stake Pools"]
      summary: List
      description: |
        <p align="right">status: <strong>stable</strong></p>

        List all known stake pools ordered by descending `desirability`.
        Some pools _may_ also have metadata attached to them if they have been registered
        to the metadata registry.
      responses: *responsesListStakePools

  /stake-pools/{stakePoolId}/wallets/{walletId}:
    put:
      operationId: joinStakePool
      tags: ["Stake Pools"]
      summary: Join
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Delegate all (current and future) addresses from the given wallet to the given stake pool.
      parameters:
        - *parametersStakePoolId
        - *parametersWalletId
        - <<: *parametersBody
          schema: *parametersJoinStakePool
      responses: *responsesJoinStakePool

    delete:
      operationId: quitStakePool
      tags: ["Stake Pools"]
      summary: Quit
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Stop delegating completely. The wallet's stake will become inactive.
      parameters:
        - *parametersStakePoolId
        - *parametersWalletId
        - <<: *parametersBody
          schema: *parametersQuitStakePool
      responses: *responsesQuitStakePool

  /wallets/{walletId}/delegations/fees:
    get:
      operationId: getDelegationFee
      tags: ["Stake Pools"]
      summary: Estimate Fee
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Estimate fee for joining or leaving a stake pool. Note that it is an
        estimation because a delegation induces a transaction for which coins
        have to be selected randomly within the wallet. Because of this randomness,
        fees can only be estimated.
      parameters:
        - *parametersWalletId
      responses: *responsesGetDelegationFee

  /wallets/{walletId}/coin-selections/random:
    post:
      operationId: selectCoins
      tags: ["Coin Selections"]
      summary: Random
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Select coins to cover the given set of payments.

        Uses the <a href="https://iohk.io/blog/self-organisation-in-coin-selection/">
        Random-Improve coin selection algorithm</a>.
      parameters:
        - *parametersWalletId
        - <<: *parametersBody
          schema: *ApiSelectCoinsData
      responses: *responsesSelectCoins

  /byron-wallets:
    get:
      operationId: listByronWallets
      tags: ["Byron Wallets"]
      summary: List
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Return a list of known Byron wallets, ordered from oldest to newest.
      responses: *responsesListByronWallets

  /byron-wallets/random:
    post:
      operationId: postByronRandomWallet
      tags: ["Byron Wallets"]
      summary: Restore (Random)
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Restore a Byron Random wallet from a mnemonic sentence.
      parameters:
        - <<: *parametersBody
          schema: *ApiByronWalletRandomPostData
      responses: *responsesPostByronWallet

  /byron-wallets/icarus:
    post:
      operationId: postByronIcarusWallet
      tags: ["Byron Wallets"]
      summary: Restore (Icarus)
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Restore a Byron Icarus wallet from a mnemonic sentence.
      parameters:
        - <<: *parametersBody
          schema: *ApiByronWalletIcarusPostData
      responses: *responsesPostByronWallet

  /byron-wallets/trezor:
    post:
      operationId: postByronTrezorWallet
      tags: ["Byron Wallets"]
      summary: Restore (Trezor)
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Restore a Byron Trezor wallet from a mnemonic sentence.
      parameters:
        - <<: *parametersBody
          schema: *ApiByronWalletTrezorPostData
      responses: *responsesPostByronWallet

  /byron-wallets/ledger:
    post:
      operationId: postByronLedgerWallet
      tags: ["Byron Wallets"]
      summary: Restore (Ledger)
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Restore a Byron Ledger wallet from a mnemonic sentence.
      parameters:
        - <<: *parametersBody
          schema: *ApiByronWalletLedgerPostData
      responses: *responsesPostByronWallet

  /byron-wallets/{walletId}:
    get:
      operationId: getByronWallet
      tags: ["Byron Wallets"]
      summary: Get
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Return information about a Byron wallet.
      parameters:
        - *parametersWalletId
      responses: *responsesGetByronWallet

    delete:
      operationId: deleteByronWallet
      tags: ["Byron Wallets"]
      summary: Delete
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Delete a Byron wallet.
      parameters:
        - *parametersWalletId
      responses: *responsesDeleteWallet

  /byron-wallets/{walletId}/tip:
    put:
      operationId: forceResyncByron
      tags: ["Byron Wallets"]
      summary: Force Resync
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Force the wallet to rewind back to the given block and sync again with the chain.
        Any incoming transaction will be erased whereas outgoing transactions will be put back
        as pending. This action should only be taken as an extreme measure to resolve potential
        syncing issues. If its use is required, please submit a ticket to https://github.com/input-output-hk/cardano-wallet/issues.

        > ⚠️ At this stage, the server only allows resyncing to genesis (i.e. `(0,0)`).
        > Any other point will yield a `403 Forbidden` error.
      parameters:
        - *parametersWalletId
        - <<: *parametersBody
          schema: *genesisBlock
      responses: *responsesForceResyncWallet

  /byron-wallets/{walletId}/transactions:
    get:
      operationId: listByronTransactions
      tags: ["Byron Transactions"]
      summary: List
      description: |
        <p align="right">status: <strong>stable</strong></p>

        List all incoming and outgoing transactions for the given wallet.
      parameters:
        - *parametersWalletId
        - *parametersStartDate
        - *parametersEndDate
        - *parametersSortOrder
      responses: *responsesListTransactions

  /byron-wallets/{walletId}/transactions/{transactionId}:
    delete:
      operationId: deleteByronTransaction
      tags: ["Byron Transactions"]
      summary: Forget
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Forget pending Byron transaction. Importantly, a transaction, when sent,
        cannot be cancelled. One can only request forgetting about it
        in order to try spending (concurrently) the same UTxO in another
        transaction. But, the transaction may still show up later in a block
        and therefore, appear in the wallet.
      parameters:
        - *parametersWalletId
        - *parametersTransactionId
      responses: *responsesDeleteTransaction

  /byron-wallets/{walletId}/migrations:
    get:
      operationId: getByronWalletMigrationInfo
      tags: ["Byron Migrations"]
      summary: Calculate Cost
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Calculate the exact cost of migrating from a Byron wallet to a new
        wallet.
      parameters:
        - *parametersWalletId
      responses: *responsesGetByronWalletMigrationInfo

  /byron-wallets/{sourceWalletId}/migrations/{targetWalletId}:
    post:
      operationId: migrateByronWallet
      tags: ["Byron Migrations"]
      summary: Migrate
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Migrate all funds from a Byron wallet to a new-style wallet.
      parameters:
        - <<: *parametersWalletId
          name: sourceWalletId
        - <<: *parametersWalletId
          name: targetWalletId
        - <<: *parametersBody
          schema: *ApiWalletPassphrase
      responses: *responsesMigrateByronWallet

  /network/information:
    get:
        operationId: getNetworkInformation
        tags: ["Network"]
        summary: Information
        description: |
          <p align="right">status: <strong>stable</strong></p>
        responses: *responsesGetNetworkInformation

  /proxy/transactions:
    post:
      operationId: postExternalTransaction
      tags: ["Proxy"]
      summary: Submit External Transaction
      consumes: ["application/octet-stream"]
      description: |
        <p align="right">status: <strong>stable</strong></p>

        Submits a transaction that was created and signed outside of cardano-wallet.
      parameters:
        - <<: *parametersBody
          schema: *signedTransactionBlob
      responses: *responsesPostExternalTransaction
